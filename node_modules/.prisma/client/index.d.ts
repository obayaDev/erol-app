
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model branches
 * 
 */
export type branches = {
  id: number
  name: string
  branch: string
  year_in: number
  year_out: number
  image_path: string
}

/**
 * Model childs
 * 
 */
export type childs = {
  id: number
  name: string
  second_name: string
  third_name: string
  year_birth: number
  absences: number
  still_in: boolean
  branchesId: number
  familyId: number
}

/**
 * Model family
 * 
 */
export type family = {
  id: number
  branchesId: number
}

/**
 * Model activities
 * 
 */
export type activities = {
  id: number
  date: Date
  name: string
  fileDate: Date | null
  filePath: string | null
  assistence: Prisma.JsonValue
  branchesId: number
}

/**
 * Model files
 * 
 */
export type files = {
  id: number
  name: string
  text: string
  max_update_date: Date
  file_path: string
  branchesId: number
  global: boolean
  userId: number
}

/**
 * Model forms_sleep
 * 
 */
export type forms_sleep = {
  id: number
  name: string
  capsQuatitiy: string
  childQuatitiy: string
  comments: string
  confirmed: boolean
  dateIn: Date
  dateOut: Date
  email: string
  firstName: string
  group: string
  phone: string
  userId: number | null
}

/**
 * Model news
 * 
 */
export type news = {
  id: number
  title: string
  text: string
  image_path: string
  global: boolean
  userId: number
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  name: string
  email: string
  createdAt: Date
  firstName: string
  password: string
  phone: string
  role: string
  updatedAt: Date
  branchesId: number
  familyId: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Branches
 * const branches = await prisma.branches.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Branches
   * const branches = await prisma.branches.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.branches`: Exposes CRUD operations for the **branches** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Branches
    * const branches = await prisma.branches.findMany()
    * ```
    */
  get branches(): Prisma.branchesDelegate<GlobalReject>;

  /**
   * `prisma.childs`: Exposes CRUD operations for the **childs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Childs
    * const childs = await prisma.childs.findMany()
    * ```
    */
  get childs(): Prisma.childsDelegate<GlobalReject>;

  /**
   * `prisma.family`: Exposes CRUD operations for the **family** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Families
    * const families = await prisma.family.findMany()
    * ```
    */
  get family(): Prisma.familyDelegate<GlobalReject>;

  /**
   * `prisma.activities`: Exposes CRUD operations for the **activities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activities.findMany()
    * ```
    */
  get activities(): Prisma.activitiesDelegate<GlobalReject>;

  /**
   * `prisma.files`: Exposes CRUD operations for the **files** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.files.findMany()
    * ```
    */
  get files(): Prisma.filesDelegate<GlobalReject>;

  /**
   * `prisma.forms_sleep`: Exposes CRUD operations for the **forms_sleep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Forms_sleeps
    * const forms_sleeps = await prisma.forms_sleep.findMany()
    * ```
    */
  get forms_sleep(): Prisma.forms_sleepDelegate<GlobalReject>;

  /**
   * `prisma.news`: Exposes CRUD operations for the **news** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more News
    * const news = await prisma.news.findMany()
    * ```
    */
  get news(): Prisma.newsDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.0
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    branches: 'branches',
    childs: 'childs',
    family: 'family',
    activities: 'activities',
    files: 'files',
    forms_sleep: 'forms_sleep',
    news: 'news',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BranchesCountOutputType
   */


  export type BranchesCountOutputType = {
    User: number
    activities: number
    childs: number
    family: number
    files: number
  }

  export type BranchesCountOutputTypeSelect = {
    User?: boolean
    activities?: boolean
    childs?: boolean
    family?: boolean
    files?: boolean
  }

  export type BranchesCountOutputTypeGetPayload<S extends boolean | null | undefined | BranchesCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BranchesCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BranchesCountOutputTypeArgs)
    ? BranchesCountOutputType 
    : S extends { select: any } & (BranchesCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BranchesCountOutputType ? BranchesCountOutputType[P] : never
  } 
      : BranchesCountOutputType




  // Custom InputTypes

  /**
   * BranchesCountOutputType without action
   */
  export type BranchesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BranchesCountOutputType
     */
    select?: BranchesCountOutputTypeSelect | null
  }



  /**
   * Count Type FamilyCountOutputType
   */


  export type FamilyCountOutputType = {
    User: number
    childs: number
  }

  export type FamilyCountOutputTypeSelect = {
    User?: boolean
    childs?: boolean
  }

  export type FamilyCountOutputTypeGetPayload<S extends boolean | null | undefined | FamilyCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FamilyCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FamilyCountOutputTypeArgs)
    ? FamilyCountOutputType 
    : S extends { select: any } & (FamilyCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FamilyCountOutputType ? FamilyCountOutputType[P] : never
  } 
      : FamilyCountOutputType




  // Custom InputTypes

  /**
   * FamilyCountOutputType without action
   */
  export type FamilyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FamilyCountOutputType
     */
    select?: FamilyCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    files: number
    forms_sleep: number
    news: number
  }

  export type UserCountOutputTypeSelect = {
    files?: boolean
    forms_sleep?: boolean
    news?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model branches
   */


  export type AggregateBranches = {
    _count: BranchesCountAggregateOutputType | null
    _avg: BranchesAvgAggregateOutputType | null
    _sum: BranchesSumAggregateOutputType | null
    _min: BranchesMinAggregateOutputType | null
    _max: BranchesMaxAggregateOutputType | null
  }

  export type BranchesAvgAggregateOutputType = {
    id: number | null
    year_in: number | null
    year_out: number | null
  }

  export type BranchesSumAggregateOutputType = {
    id: number | null
    year_in: number | null
    year_out: number | null
  }

  export type BranchesMinAggregateOutputType = {
    id: number | null
    name: string | null
    branch: string | null
    year_in: number | null
    year_out: number | null
    image_path: string | null
  }

  export type BranchesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    branch: string | null
    year_in: number | null
    year_out: number | null
    image_path: string | null
  }

  export type BranchesCountAggregateOutputType = {
    id: number
    name: number
    branch: number
    year_in: number
    year_out: number
    image_path: number
    _all: number
  }


  export type BranchesAvgAggregateInputType = {
    id?: true
    year_in?: true
    year_out?: true
  }

  export type BranchesSumAggregateInputType = {
    id?: true
    year_in?: true
    year_out?: true
  }

  export type BranchesMinAggregateInputType = {
    id?: true
    name?: true
    branch?: true
    year_in?: true
    year_out?: true
    image_path?: true
  }

  export type BranchesMaxAggregateInputType = {
    id?: true
    name?: true
    branch?: true
    year_in?: true
    year_out?: true
    image_path?: true
  }

  export type BranchesCountAggregateInputType = {
    id?: true
    name?: true
    branch?: true
    year_in?: true
    year_out?: true
    image_path?: true
    _all?: true
  }

  export type BranchesAggregateArgs = {
    /**
     * Filter which branches to aggregate.
     */
    where?: branchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of branches to fetch.
     */
    orderBy?: Enumerable<branchesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: branchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned branches
    **/
    _count?: true | BranchesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BranchesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BranchesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BranchesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BranchesMaxAggregateInputType
  }

  export type GetBranchesAggregateType<T extends BranchesAggregateArgs> = {
        [P in keyof T & keyof AggregateBranches]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBranches[P]>
      : GetScalarType<T[P], AggregateBranches[P]>
  }




  export type BranchesGroupByArgs = {
    where?: branchesWhereInput
    orderBy?: Enumerable<branchesOrderByWithAggregationInput>
    by: BranchesScalarFieldEnum[]
    having?: branchesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BranchesCountAggregateInputType | true
    _avg?: BranchesAvgAggregateInputType
    _sum?: BranchesSumAggregateInputType
    _min?: BranchesMinAggregateInputType
    _max?: BranchesMaxAggregateInputType
  }


  export type BranchesGroupByOutputType = {
    id: number
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path: string
    _count: BranchesCountAggregateOutputType | null
    _avg: BranchesAvgAggregateOutputType | null
    _sum: BranchesSumAggregateOutputType | null
    _min: BranchesMinAggregateOutputType | null
    _max: BranchesMaxAggregateOutputType | null
  }

  type GetBranchesGroupByPayload<T extends BranchesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BranchesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BranchesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BranchesGroupByOutputType[P]>
            : GetScalarType<T[P], BranchesGroupByOutputType[P]>
        }
      >
    >


  export type branchesSelect = {
    id?: boolean
    name?: boolean
    branch?: boolean
    year_in?: boolean
    year_out?: boolean
    image_path?: boolean
    User?: boolean | branches$UserArgs
    activities?: boolean | branches$activitiesArgs
    childs?: boolean | branches$childsArgs
    family?: boolean | branches$familyArgs
    files?: boolean | branches$filesArgs
    _count?: boolean | BranchesCountOutputTypeArgs
  }


  export type branchesInclude = {
    User?: boolean | branches$UserArgs
    activities?: boolean | branches$activitiesArgs
    childs?: boolean | branches$childsArgs
    family?: boolean | branches$familyArgs
    files?: boolean | branches$filesArgs
    _count?: boolean | BranchesCountOutputTypeArgs
  }

  export type branchesGetPayload<S extends boolean | null | undefined | branchesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? branches :
    S extends undefined ? never :
    S extends { include: any } & (branchesArgs | branchesFindManyArgs)
    ? branches  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'activities' ? Array < activitiesGetPayload<S['include'][P]>>  :
        P extends 'childs' ? Array < childsGetPayload<S['include'][P]>>  :
        P extends 'family' ? Array < familyGetPayload<S['include'][P]>>  :
        P extends 'files' ? Array < filesGetPayload<S['include'][P]>>  :
        P extends '_count' ? BranchesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (branchesArgs | branchesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'activities' ? Array < activitiesGetPayload<S['select'][P]>>  :
        P extends 'childs' ? Array < childsGetPayload<S['select'][P]>>  :
        P extends 'family' ? Array < familyGetPayload<S['select'][P]>>  :
        P extends 'files' ? Array < filesGetPayload<S['select'][P]>>  :
        P extends '_count' ? BranchesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof branches ? branches[P] : never
  } 
      : branches


  type branchesCountArgs = 
    Omit<branchesFindManyArgs, 'select' | 'include'> & {
      select?: BranchesCountAggregateInputType | true
    }

  export interface branchesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Branches that matches the filter.
     * @param {branchesFindUniqueArgs} args - Arguments to find a Branches
     * @example
     * // Get one Branches
     * const branches = await prisma.branches.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends branchesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, branchesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'branches'> extends True ? Prisma__branchesClient<branchesGetPayload<T>> : Prisma__branchesClient<branchesGetPayload<T> | null, null>

    /**
     * Find one Branches that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {branchesFindUniqueOrThrowArgs} args - Arguments to find a Branches
     * @example
     * // Get one Branches
     * const branches = await prisma.branches.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends branchesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, branchesFindUniqueOrThrowArgs>
    ): Prisma__branchesClient<branchesGetPayload<T>>

    /**
     * Find the first Branches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {branchesFindFirstArgs} args - Arguments to find a Branches
     * @example
     * // Get one Branches
     * const branches = await prisma.branches.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends branchesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, branchesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'branches'> extends True ? Prisma__branchesClient<branchesGetPayload<T>> : Prisma__branchesClient<branchesGetPayload<T> | null, null>

    /**
     * Find the first Branches that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {branchesFindFirstOrThrowArgs} args - Arguments to find a Branches
     * @example
     * // Get one Branches
     * const branches = await prisma.branches.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends branchesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, branchesFindFirstOrThrowArgs>
    ): Prisma__branchesClient<branchesGetPayload<T>>

    /**
     * Find zero or more Branches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {branchesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Branches
     * const branches = await prisma.branches.findMany()
     * 
     * // Get first 10 Branches
     * const branches = await prisma.branches.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const branchesWithIdOnly = await prisma.branches.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends branchesFindManyArgs>(
      args?: SelectSubset<T, branchesFindManyArgs>
    ): Prisma.PrismaPromise<Array<branchesGetPayload<T>>>

    /**
     * Create a Branches.
     * @param {branchesCreateArgs} args - Arguments to create a Branches.
     * @example
     * // Create one Branches
     * const Branches = await prisma.branches.create({
     *   data: {
     *     // ... data to create a Branches
     *   }
     * })
     * 
    **/
    create<T extends branchesCreateArgs>(
      args: SelectSubset<T, branchesCreateArgs>
    ): Prisma__branchesClient<branchesGetPayload<T>>

    /**
     * Create many Branches.
     *     @param {branchesCreateManyArgs} args - Arguments to create many Branches.
     *     @example
     *     // Create many Branches
     *     const branches = await prisma.branches.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends branchesCreateManyArgs>(
      args?: SelectSubset<T, branchesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Branches.
     * @param {branchesDeleteArgs} args - Arguments to delete one Branches.
     * @example
     * // Delete one Branches
     * const Branches = await prisma.branches.delete({
     *   where: {
     *     // ... filter to delete one Branches
     *   }
     * })
     * 
    **/
    delete<T extends branchesDeleteArgs>(
      args: SelectSubset<T, branchesDeleteArgs>
    ): Prisma__branchesClient<branchesGetPayload<T>>

    /**
     * Update one Branches.
     * @param {branchesUpdateArgs} args - Arguments to update one Branches.
     * @example
     * // Update one Branches
     * const branches = await prisma.branches.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends branchesUpdateArgs>(
      args: SelectSubset<T, branchesUpdateArgs>
    ): Prisma__branchesClient<branchesGetPayload<T>>

    /**
     * Delete zero or more Branches.
     * @param {branchesDeleteManyArgs} args - Arguments to filter Branches to delete.
     * @example
     * // Delete a few Branches
     * const { count } = await prisma.branches.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends branchesDeleteManyArgs>(
      args?: SelectSubset<T, branchesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {branchesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Branches
     * const branches = await prisma.branches.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends branchesUpdateManyArgs>(
      args: SelectSubset<T, branchesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Branches.
     * @param {branchesUpsertArgs} args - Arguments to update or create a Branches.
     * @example
     * // Update or create a Branches
     * const branches = await prisma.branches.upsert({
     *   create: {
     *     // ... data to create a Branches
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Branches we want to update
     *   }
     * })
    **/
    upsert<T extends branchesUpsertArgs>(
      args: SelectSubset<T, branchesUpsertArgs>
    ): Prisma__branchesClient<branchesGetPayload<T>>

    /**
     * Count the number of Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {branchesCountArgs} args - Arguments to filter Branches to count.
     * @example
     * // Count the number of Branches
     * const count = await prisma.branches.count({
     *   where: {
     *     // ... the filter for the Branches we want to count
     *   }
     * })
    **/
    count<T extends branchesCountArgs>(
      args?: Subset<T, branchesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BranchesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BranchesAggregateArgs>(args: Subset<T, BranchesAggregateArgs>): Prisma.PrismaPromise<GetBranchesAggregateType<T>>

    /**
     * Group by Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BranchesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BranchesGroupByArgs['orderBy'] }
        : { orderBy?: BranchesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BranchesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBranchesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for branches.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__branchesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends branches$UserArgs= {}>(args?: Subset<T, branches$UserArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    activities<T extends branches$activitiesArgs= {}>(args?: Subset<T, branches$activitiesArgs>): Prisma.PrismaPromise<Array<activitiesGetPayload<T>>| Null>;

    childs<T extends branches$childsArgs= {}>(args?: Subset<T, branches$childsArgs>): Prisma.PrismaPromise<Array<childsGetPayload<T>>| Null>;

    family<T extends branches$familyArgs= {}>(args?: Subset<T, branches$familyArgs>): Prisma.PrismaPromise<Array<familyGetPayload<T>>| Null>;

    files<T extends branches$filesArgs= {}>(args?: Subset<T, branches$filesArgs>): Prisma.PrismaPromise<Array<filesGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * branches base type for findUnique actions
   */
  export type branchesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the branches
     */
    select?: branchesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: branchesInclude | null
    /**
     * Filter, which branches to fetch.
     */
    where: branchesWhereUniqueInput
  }

  /**
   * branches findUnique
   */
  export interface branchesFindUniqueArgs extends branchesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * branches findUniqueOrThrow
   */
  export type branchesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the branches
     */
    select?: branchesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: branchesInclude | null
    /**
     * Filter, which branches to fetch.
     */
    where: branchesWhereUniqueInput
  }


  /**
   * branches base type for findFirst actions
   */
  export type branchesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the branches
     */
    select?: branchesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: branchesInclude | null
    /**
     * Filter, which branches to fetch.
     */
    where?: branchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of branches to fetch.
     */
    orderBy?: Enumerable<branchesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for branches.
     */
    cursor?: branchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of branches.
     */
    distinct?: Enumerable<BranchesScalarFieldEnum>
  }

  /**
   * branches findFirst
   */
  export interface branchesFindFirstArgs extends branchesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * branches findFirstOrThrow
   */
  export type branchesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the branches
     */
    select?: branchesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: branchesInclude | null
    /**
     * Filter, which branches to fetch.
     */
    where?: branchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of branches to fetch.
     */
    orderBy?: Enumerable<branchesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for branches.
     */
    cursor?: branchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of branches.
     */
    distinct?: Enumerable<BranchesScalarFieldEnum>
  }


  /**
   * branches findMany
   */
  export type branchesFindManyArgs = {
    /**
     * Select specific fields to fetch from the branches
     */
    select?: branchesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: branchesInclude | null
    /**
     * Filter, which branches to fetch.
     */
    where?: branchesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of branches to fetch.
     */
    orderBy?: Enumerable<branchesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing branches.
     */
    cursor?: branchesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` branches.
     */
    skip?: number
    distinct?: Enumerable<BranchesScalarFieldEnum>
  }


  /**
   * branches create
   */
  export type branchesCreateArgs = {
    /**
     * Select specific fields to fetch from the branches
     */
    select?: branchesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: branchesInclude | null
    /**
     * The data needed to create a branches.
     */
    data: XOR<branchesCreateInput, branchesUncheckedCreateInput>
  }


  /**
   * branches createMany
   */
  export type branchesCreateManyArgs = {
    /**
     * The data used to create many branches.
     */
    data: Enumerable<branchesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * branches update
   */
  export type branchesUpdateArgs = {
    /**
     * Select specific fields to fetch from the branches
     */
    select?: branchesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: branchesInclude | null
    /**
     * The data needed to update a branches.
     */
    data: XOR<branchesUpdateInput, branchesUncheckedUpdateInput>
    /**
     * Choose, which branches to update.
     */
    where: branchesWhereUniqueInput
  }


  /**
   * branches updateMany
   */
  export type branchesUpdateManyArgs = {
    /**
     * The data used to update branches.
     */
    data: XOR<branchesUpdateManyMutationInput, branchesUncheckedUpdateManyInput>
    /**
     * Filter which branches to update
     */
    where?: branchesWhereInput
  }


  /**
   * branches upsert
   */
  export type branchesUpsertArgs = {
    /**
     * Select specific fields to fetch from the branches
     */
    select?: branchesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: branchesInclude | null
    /**
     * The filter to search for the branches to update in case it exists.
     */
    where: branchesWhereUniqueInput
    /**
     * In case the branches found by the `where` argument doesn't exist, create a new branches with this data.
     */
    create: XOR<branchesCreateInput, branchesUncheckedCreateInput>
    /**
     * In case the branches was found with the provided `where` argument, update it with this data.
     */
    update: XOR<branchesUpdateInput, branchesUncheckedUpdateInput>
  }


  /**
   * branches delete
   */
  export type branchesDeleteArgs = {
    /**
     * Select specific fields to fetch from the branches
     */
    select?: branchesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: branchesInclude | null
    /**
     * Filter which branches to delete.
     */
    where: branchesWhereUniqueInput
  }


  /**
   * branches deleteMany
   */
  export type branchesDeleteManyArgs = {
    /**
     * Filter which branches to delete
     */
    where?: branchesWhereInput
  }


  /**
   * branches.User
   */
  export type branches$UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * branches.activities
   */
  export type branches$activitiesArgs = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
    where?: activitiesWhereInput
    orderBy?: Enumerable<activitiesOrderByWithRelationInput>
    cursor?: activitiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ActivitiesScalarFieldEnum>
  }


  /**
   * branches.childs
   */
  export type branches$childsArgs = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    where?: childsWhereInput
    orderBy?: Enumerable<childsOrderByWithRelationInput>
    cursor?: childsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChildsScalarFieldEnum>
  }


  /**
   * branches.family
   */
  export type branches$familyArgs = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
    where?: familyWhereInput
    orderBy?: Enumerable<familyOrderByWithRelationInput>
    cursor?: familyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FamilyScalarFieldEnum>
  }


  /**
   * branches.files
   */
  export type branches$filesArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    where?: filesWhereInput
    orderBy?: Enumerable<filesOrderByWithRelationInput>
    cursor?: filesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FilesScalarFieldEnum>
  }


  /**
   * branches without action
   */
  export type branchesArgs = {
    /**
     * Select specific fields to fetch from the branches
     */
    select?: branchesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: branchesInclude | null
  }



  /**
   * Model childs
   */


  export type AggregateChilds = {
    _count: ChildsCountAggregateOutputType | null
    _avg: ChildsAvgAggregateOutputType | null
    _sum: ChildsSumAggregateOutputType | null
    _min: ChildsMinAggregateOutputType | null
    _max: ChildsMaxAggregateOutputType | null
  }

  export type ChildsAvgAggregateOutputType = {
    id: number | null
    year_birth: number | null
    absences: number | null
    branchesId: number | null
    familyId: number | null
  }

  export type ChildsSumAggregateOutputType = {
    id: number | null
    year_birth: number | null
    absences: number | null
    branchesId: number | null
    familyId: number | null
  }

  export type ChildsMinAggregateOutputType = {
    id: number | null
    name: string | null
    second_name: string | null
    third_name: string | null
    year_birth: number | null
    absences: number | null
    still_in: boolean | null
    branchesId: number | null
    familyId: number | null
  }

  export type ChildsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    second_name: string | null
    third_name: string | null
    year_birth: number | null
    absences: number | null
    still_in: boolean | null
    branchesId: number | null
    familyId: number | null
  }

  export type ChildsCountAggregateOutputType = {
    id: number
    name: number
    second_name: number
    third_name: number
    year_birth: number
    absences: number
    still_in: number
    branchesId: number
    familyId: number
    _all: number
  }


  export type ChildsAvgAggregateInputType = {
    id?: true
    year_birth?: true
    absences?: true
    branchesId?: true
    familyId?: true
  }

  export type ChildsSumAggregateInputType = {
    id?: true
    year_birth?: true
    absences?: true
    branchesId?: true
    familyId?: true
  }

  export type ChildsMinAggregateInputType = {
    id?: true
    name?: true
    second_name?: true
    third_name?: true
    year_birth?: true
    absences?: true
    still_in?: true
    branchesId?: true
    familyId?: true
  }

  export type ChildsMaxAggregateInputType = {
    id?: true
    name?: true
    second_name?: true
    third_name?: true
    year_birth?: true
    absences?: true
    still_in?: true
    branchesId?: true
    familyId?: true
  }

  export type ChildsCountAggregateInputType = {
    id?: true
    name?: true
    second_name?: true
    third_name?: true
    year_birth?: true
    absences?: true
    still_in?: true
    branchesId?: true
    familyId?: true
    _all?: true
  }

  export type ChildsAggregateArgs = {
    /**
     * Filter which childs to aggregate.
     */
    where?: childsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of childs to fetch.
     */
    orderBy?: Enumerable<childsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: childsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` childs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` childs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned childs
    **/
    _count?: true | ChildsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChildsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChildsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChildsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChildsMaxAggregateInputType
  }

  export type GetChildsAggregateType<T extends ChildsAggregateArgs> = {
        [P in keyof T & keyof AggregateChilds]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChilds[P]>
      : GetScalarType<T[P], AggregateChilds[P]>
  }




  export type ChildsGroupByArgs = {
    where?: childsWhereInput
    orderBy?: Enumerable<childsOrderByWithAggregationInput>
    by: ChildsScalarFieldEnum[]
    having?: childsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChildsCountAggregateInputType | true
    _avg?: ChildsAvgAggregateInputType
    _sum?: ChildsSumAggregateInputType
    _min?: ChildsMinAggregateInputType
    _max?: ChildsMaxAggregateInputType
  }


  export type ChildsGroupByOutputType = {
    id: number
    name: string
    second_name: string
    third_name: string
    year_birth: number
    absences: number
    still_in: boolean
    branchesId: number
    familyId: number
    _count: ChildsCountAggregateOutputType | null
    _avg: ChildsAvgAggregateOutputType | null
    _sum: ChildsSumAggregateOutputType | null
    _min: ChildsMinAggregateOutputType | null
    _max: ChildsMaxAggregateOutputType | null
  }

  type GetChildsGroupByPayload<T extends ChildsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChildsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChildsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChildsGroupByOutputType[P]>
            : GetScalarType<T[P], ChildsGroupByOutputType[P]>
        }
      >
    >


  export type childsSelect = {
    id?: boolean
    name?: boolean
    second_name?: boolean
    third_name?: boolean
    year_birth?: boolean
    absences?: boolean
    still_in?: boolean
    branchesId?: boolean
    familyId?: boolean
    branch?: boolean | branchesArgs
    family?: boolean | familyArgs
  }


  export type childsInclude = {
    branch?: boolean | branchesArgs
    family?: boolean | familyArgs
  }

  export type childsGetPayload<S extends boolean | null | undefined | childsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? childs :
    S extends undefined ? never :
    S extends { include: any } & (childsArgs | childsFindManyArgs)
    ? childs  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'branch' ? branchesGetPayload<S['include'][P]> :
        P extends 'family' ? familyGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (childsArgs | childsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'branch' ? branchesGetPayload<S['select'][P]> :
        P extends 'family' ? familyGetPayload<S['select'][P]> :  P extends keyof childs ? childs[P] : never
  } 
      : childs


  type childsCountArgs = 
    Omit<childsFindManyArgs, 'select' | 'include'> & {
      select?: ChildsCountAggregateInputType | true
    }

  export interface childsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Childs that matches the filter.
     * @param {childsFindUniqueArgs} args - Arguments to find a Childs
     * @example
     * // Get one Childs
     * const childs = await prisma.childs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends childsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, childsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'childs'> extends True ? Prisma__childsClient<childsGetPayload<T>> : Prisma__childsClient<childsGetPayload<T> | null, null>

    /**
     * Find one Childs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {childsFindUniqueOrThrowArgs} args - Arguments to find a Childs
     * @example
     * // Get one Childs
     * const childs = await prisma.childs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends childsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, childsFindUniqueOrThrowArgs>
    ): Prisma__childsClient<childsGetPayload<T>>

    /**
     * Find the first Childs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {childsFindFirstArgs} args - Arguments to find a Childs
     * @example
     * // Get one Childs
     * const childs = await prisma.childs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends childsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, childsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'childs'> extends True ? Prisma__childsClient<childsGetPayload<T>> : Prisma__childsClient<childsGetPayload<T> | null, null>

    /**
     * Find the first Childs that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {childsFindFirstOrThrowArgs} args - Arguments to find a Childs
     * @example
     * // Get one Childs
     * const childs = await prisma.childs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends childsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, childsFindFirstOrThrowArgs>
    ): Prisma__childsClient<childsGetPayload<T>>

    /**
     * Find zero or more Childs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {childsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Childs
     * const childs = await prisma.childs.findMany()
     * 
     * // Get first 10 Childs
     * const childs = await prisma.childs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const childsWithIdOnly = await prisma.childs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends childsFindManyArgs>(
      args?: SelectSubset<T, childsFindManyArgs>
    ): Prisma.PrismaPromise<Array<childsGetPayload<T>>>

    /**
     * Create a Childs.
     * @param {childsCreateArgs} args - Arguments to create a Childs.
     * @example
     * // Create one Childs
     * const Childs = await prisma.childs.create({
     *   data: {
     *     // ... data to create a Childs
     *   }
     * })
     * 
    **/
    create<T extends childsCreateArgs>(
      args: SelectSubset<T, childsCreateArgs>
    ): Prisma__childsClient<childsGetPayload<T>>

    /**
     * Create many Childs.
     *     @param {childsCreateManyArgs} args - Arguments to create many Childs.
     *     @example
     *     // Create many Childs
     *     const childs = await prisma.childs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends childsCreateManyArgs>(
      args?: SelectSubset<T, childsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Childs.
     * @param {childsDeleteArgs} args - Arguments to delete one Childs.
     * @example
     * // Delete one Childs
     * const Childs = await prisma.childs.delete({
     *   where: {
     *     // ... filter to delete one Childs
     *   }
     * })
     * 
    **/
    delete<T extends childsDeleteArgs>(
      args: SelectSubset<T, childsDeleteArgs>
    ): Prisma__childsClient<childsGetPayload<T>>

    /**
     * Update one Childs.
     * @param {childsUpdateArgs} args - Arguments to update one Childs.
     * @example
     * // Update one Childs
     * const childs = await prisma.childs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends childsUpdateArgs>(
      args: SelectSubset<T, childsUpdateArgs>
    ): Prisma__childsClient<childsGetPayload<T>>

    /**
     * Delete zero or more Childs.
     * @param {childsDeleteManyArgs} args - Arguments to filter Childs to delete.
     * @example
     * // Delete a few Childs
     * const { count } = await prisma.childs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends childsDeleteManyArgs>(
      args?: SelectSubset<T, childsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Childs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {childsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Childs
     * const childs = await prisma.childs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends childsUpdateManyArgs>(
      args: SelectSubset<T, childsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Childs.
     * @param {childsUpsertArgs} args - Arguments to update or create a Childs.
     * @example
     * // Update or create a Childs
     * const childs = await prisma.childs.upsert({
     *   create: {
     *     // ... data to create a Childs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Childs we want to update
     *   }
     * })
    **/
    upsert<T extends childsUpsertArgs>(
      args: SelectSubset<T, childsUpsertArgs>
    ): Prisma__childsClient<childsGetPayload<T>>

    /**
     * Count the number of Childs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {childsCountArgs} args - Arguments to filter Childs to count.
     * @example
     * // Count the number of Childs
     * const count = await prisma.childs.count({
     *   where: {
     *     // ... the filter for the Childs we want to count
     *   }
     * })
    **/
    count<T extends childsCountArgs>(
      args?: Subset<T, childsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChildsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Childs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChildsAggregateArgs>(args: Subset<T, ChildsAggregateArgs>): Prisma.PrismaPromise<GetChildsAggregateType<T>>

    /**
     * Group by Childs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChildsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChildsGroupByArgs['orderBy'] }
        : { orderBy?: ChildsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChildsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChildsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for childs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__childsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    branch<T extends branchesArgs= {}>(args?: Subset<T, branchesArgs>): Prisma__branchesClient<branchesGetPayload<T> | Null>;

    family<T extends familyArgs= {}>(args?: Subset<T, familyArgs>): Prisma__familyClient<familyGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * childs base type for findUnique actions
   */
  export type childsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    /**
     * Filter, which childs to fetch.
     */
    where: childsWhereUniqueInput
  }

  /**
   * childs findUnique
   */
  export interface childsFindUniqueArgs extends childsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * childs findUniqueOrThrow
   */
  export type childsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    /**
     * Filter, which childs to fetch.
     */
    where: childsWhereUniqueInput
  }


  /**
   * childs base type for findFirst actions
   */
  export type childsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    /**
     * Filter, which childs to fetch.
     */
    where?: childsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of childs to fetch.
     */
    orderBy?: Enumerable<childsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for childs.
     */
    cursor?: childsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` childs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` childs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of childs.
     */
    distinct?: Enumerable<ChildsScalarFieldEnum>
  }

  /**
   * childs findFirst
   */
  export interface childsFindFirstArgs extends childsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * childs findFirstOrThrow
   */
  export type childsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    /**
     * Filter, which childs to fetch.
     */
    where?: childsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of childs to fetch.
     */
    orderBy?: Enumerable<childsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for childs.
     */
    cursor?: childsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` childs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` childs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of childs.
     */
    distinct?: Enumerable<ChildsScalarFieldEnum>
  }


  /**
   * childs findMany
   */
  export type childsFindManyArgs = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    /**
     * Filter, which childs to fetch.
     */
    where?: childsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of childs to fetch.
     */
    orderBy?: Enumerable<childsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing childs.
     */
    cursor?: childsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` childs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` childs.
     */
    skip?: number
    distinct?: Enumerable<ChildsScalarFieldEnum>
  }


  /**
   * childs create
   */
  export type childsCreateArgs = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    /**
     * The data needed to create a childs.
     */
    data: XOR<childsCreateInput, childsUncheckedCreateInput>
  }


  /**
   * childs createMany
   */
  export type childsCreateManyArgs = {
    /**
     * The data used to create many childs.
     */
    data: Enumerable<childsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * childs update
   */
  export type childsUpdateArgs = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    /**
     * The data needed to update a childs.
     */
    data: XOR<childsUpdateInput, childsUncheckedUpdateInput>
    /**
     * Choose, which childs to update.
     */
    where: childsWhereUniqueInput
  }


  /**
   * childs updateMany
   */
  export type childsUpdateManyArgs = {
    /**
     * The data used to update childs.
     */
    data: XOR<childsUpdateManyMutationInput, childsUncheckedUpdateManyInput>
    /**
     * Filter which childs to update
     */
    where?: childsWhereInput
  }


  /**
   * childs upsert
   */
  export type childsUpsertArgs = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    /**
     * The filter to search for the childs to update in case it exists.
     */
    where: childsWhereUniqueInput
    /**
     * In case the childs found by the `where` argument doesn't exist, create a new childs with this data.
     */
    create: XOR<childsCreateInput, childsUncheckedCreateInput>
    /**
     * In case the childs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<childsUpdateInput, childsUncheckedUpdateInput>
  }


  /**
   * childs delete
   */
  export type childsDeleteArgs = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    /**
     * Filter which childs to delete.
     */
    where: childsWhereUniqueInput
  }


  /**
   * childs deleteMany
   */
  export type childsDeleteManyArgs = {
    /**
     * Filter which childs to delete
     */
    where?: childsWhereInput
  }


  /**
   * childs without action
   */
  export type childsArgs = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
  }



  /**
   * Model family
   */


  export type AggregateFamily = {
    _count: FamilyCountAggregateOutputType | null
    _avg: FamilyAvgAggregateOutputType | null
    _sum: FamilySumAggregateOutputType | null
    _min: FamilyMinAggregateOutputType | null
    _max: FamilyMaxAggregateOutputType | null
  }

  export type FamilyAvgAggregateOutputType = {
    id: number | null
    branchesId: number | null
  }

  export type FamilySumAggregateOutputType = {
    id: number | null
    branchesId: number | null
  }

  export type FamilyMinAggregateOutputType = {
    id: number | null
    branchesId: number | null
  }

  export type FamilyMaxAggregateOutputType = {
    id: number | null
    branchesId: number | null
  }

  export type FamilyCountAggregateOutputType = {
    id: number
    branchesId: number
    _all: number
  }


  export type FamilyAvgAggregateInputType = {
    id?: true
    branchesId?: true
  }

  export type FamilySumAggregateInputType = {
    id?: true
    branchesId?: true
  }

  export type FamilyMinAggregateInputType = {
    id?: true
    branchesId?: true
  }

  export type FamilyMaxAggregateInputType = {
    id?: true
    branchesId?: true
  }

  export type FamilyCountAggregateInputType = {
    id?: true
    branchesId?: true
    _all?: true
  }

  export type FamilyAggregateArgs = {
    /**
     * Filter which family to aggregate.
     */
    where?: familyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of families to fetch.
     */
    orderBy?: Enumerable<familyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: familyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` families.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned families
    **/
    _count?: true | FamilyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FamilyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FamilySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FamilyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FamilyMaxAggregateInputType
  }

  export type GetFamilyAggregateType<T extends FamilyAggregateArgs> = {
        [P in keyof T & keyof AggregateFamily]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFamily[P]>
      : GetScalarType<T[P], AggregateFamily[P]>
  }




  export type FamilyGroupByArgs = {
    where?: familyWhereInput
    orderBy?: Enumerable<familyOrderByWithAggregationInput>
    by: FamilyScalarFieldEnum[]
    having?: familyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FamilyCountAggregateInputType | true
    _avg?: FamilyAvgAggregateInputType
    _sum?: FamilySumAggregateInputType
    _min?: FamilyMinAggregateInputType
    _max?: FamilyMaxAggregateInputType
  }


  export type FamilyGroupByOutputType = {
    id: number
    branchesId: number
    _count: FamilyCountAggregateOutputType | null
    _avg: FamilyAvgAggregateOutputType | null
    _sum: FamilySumAggregateOutputType | null
    _min: FamilyMinAggregateOutputType | null
    _max: FamilyMaxAggregateOutputType | null
  }

  type GetFamilyGroupByPayload<T extends FamilyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FamilyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FamilyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FamilyGroupByOutputType[P]>
            : GetScalarType<T[P], FamilyGroupByOutputType[P]>
        }
      >
    >


  export type familySelect = {
    id?: boolean
    branchesId?: boolean
    User?: boolean | family$UserArgs
    childs?: boolean | family$childsArgs
    branch?: boolean | branchesArgs
    _count?: boolean | FamilyCountOutputTypeArgs
  }


  export type familyInclude = {
    User?: boolean | family$UserArgs
    childs?: boolean | family$childsArgs
    branch?: boolean | branchesArgs
    _count?: boolean | FamilyCountOutputTypeArgs
  }

  export type familyGetPayload<S extends boolean | null | undefined | familyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? family :
    S extends undefined ? never :
    S extends { include: any } & (familyArgs | familyFindManyArgs)
    ? family  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'childs' ? Array < childsGetPayload<S['include'][P]>>  :
        P extends 'branch' ? branchesGetPayload<S['include'][P]> :
        P extends '_count' ? FamilyCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (familyArgs | familyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'childs' ? Array < childsGetPayload<S['select'][P]>>  :
        P extends 'branch' ? branchesGetPayload<S['select'][P]> :
        P extends '_count' ? FamilyCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof family ? family[P] : never
  } 
      : family


  type familyCountArgs = 
    Omit<familyFindManyArgs, 'select' | 'include'> & {
      select?: FamilyCountAggregateInputType | true
    }

  export interface familyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Family that matches the filter.
     * @param {familyFindUniqueArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends familyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, familyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'family'> extends True ? Prisma__familyClient<familyGetPayload<T>> : Prisma__familyClient<familyGetPayload<T> | null, null>

    /**
     * Find one Family that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {familyFindUniqueOrThrowArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends familyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, familyFindUniqueOrThrowArgs>
    ): Prisma__familyClient<familyGetPayload<T>>

    /**
     * Find the first Family that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {familyFindFirstArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends familyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, familyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'family'> extends True ? Prisma__familyClient<familyGetPayload<T>> : Prisma__familyClient<familyGetPayload<T> | null, null>

    /**
     * Find the first Family that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {familyFindFirstOrThrowArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends familyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, familyFindFirstOrThrowArgs>
    ): Prisma__familyClient<familyGetPayload<T>>

    /**
     * Find zero or more Families that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {familyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Families
     * const families = await prisma.family.findMany()
     * 
     * // Get first 10 Families
     * const families = await prisma.family.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const familyWithIdOnly = await prisma.family.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends familyFindManyArgs>(
      args?: SelectSubset<T, familyFindManyArgs>
    ): Prisma.PrismaPromise<Array<familyGetPayload<T>>>

    /**
     * Create a Family.
     * @param {familyCreateArgs} args - Arguments to create a Family.
     * @example
     * // Create one Family
     * const Family = await prisma.family.create({
     *   data: {
     *     // ... data to create a Family
     *   }
     * })
     * 
    **/
    create<T extends familyCreateArgs>(
      args: SelectSubset<T, familyCreateArgs>
    ): Prisma__familyClient<familyGetPayload<T>>

    /**
     * Create many Families.
     *     @param {familyCreateManyArgs} args - Arguments to create many Families.
     *     @example
     *     // Create many Families
     *     const family = await prisma.family.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends familyCreateManyArgs>(
      args?: SelectSubset<T, familyCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Family.
     * @param {familyDeleteArgs} args - Arguments to delete one Family.
     * @example
     * // Delete one Family
     * const Family = await prisma.family.delete({
     *   where: {
     *     // ... filter to delete one Family
     *   }
     * })
     * 
    **/
    delete<T extends familyDeleteArgs>(
      args: SelectSubset<T, familyDeleteArgs>
    ): Prisma__familyClient<familyGetPayload<T>>

    /**
     * Update one Family.
     * @param {familyUpdateArgs} args - Arguments to update one Family.
     * @example
     * // Update one Family
     * const family = await prisma.family.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends familyUpdateArgs>(
      args: SelectSubset<T, familyUpdateArgs>
    ): Prisma__familyClient<familyGetPayload<T>>

    /**
     * Delete zero or more Families.
     * @param {familyDeleteManyArgs} args - Arguments to filter Families to delete.
     * @example
     * // Delete a few Families
     * const { count } = await prisma.family.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends familyDeleteManyArgs>(
      args?: SelectSubset<T, familyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Families.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {familyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Families
     * const family = await prisma.family.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends familyUpdateManyArgs>(
      args: SelectSubset<T, familyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Family.
     * @param {familyUpsertArgs} args - Arguments to update or create a Family.
     * @example
     * // Update or create a Family
     * const family = await prisma.family.upsert({
     *   create: {
     *     // ... data to create a Family
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Family we want to update
     *   }
     * })
    **/
    upsert<T extends familyUpsertArgs>(
      args: SelectSubset<T, familyUpsertArgs>
    ): Prisma__familyClient<familyGetPayload<T>>

    /**
     * Count the number of Families.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {familyCountArgs} args - Arguments to filter Families to count.
     * @example
     * // Count the number of Families
     * const count = await prisma.family.count({
     *   where: {
     *     // ... the filter for the Families we want to count
     *   }
     * })
    **/
    count<T extends familyCountArgs>(
      args?: Subset<T, familyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FamilyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Family.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FamilyAggregateArgs>(args: Subset<T, FamilyAggregateArgs>): Prisma.PrismaPromise<GetFamilyAggregateType<T>>

    /**
     * Group by Family.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FamilyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FamilyGroupByArgs['orderBy'] }
        : { orderBy?: FamilyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FamilyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFamilyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for family.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__familyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends family$UserArgs= {}>(args?: Subset<T, family$UserArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    childs<T extends family$childsArgs= {}>(args?: Subset<T, family$childsArgs>): Prisma.PrismaPromise<Array<childsGetPayload<T>>| Null>;

    branch<T extends branchesArgs= {}>(args?: Subset<T, branchesArgs>): Prisma__branchesClient<branchesGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * family base type for findUnique actions
   */
  export type familyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
    /**
     * Filter, which family to fetch.
     */
    where: familyWhereUniqueInput
  }

  /**
   * family findUnique
   */
  export interface familyFindUniqueArgs extends familyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * family findUniqueOrThrow
   */
  export type familyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
    /**
     * Filter, which family to fetch.
     */
    where: familyWhereUniqueInput
  }


  /**
   * family base type for findFirst actions
   */
  export type familyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
    /**
     * Filter, which family to fetch.
     */
    where?: familyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of families to fetch.
     */
    orderBy?: Enumerable<familyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for families.
     */
    cursor?: familyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` families.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of families.
     */
    distinct?: Enumerable<FamilyScalarFieldEnum>
  }

  /**
   * family findFirst
   */
  export interface familyFindFirstArgs extends familyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * family findFirstOrThrow
   */
  export type familyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
    /**
     * Filter, which family to fetch.
     */
    where?: familyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of families to fetch.
     */
    orderBy?: Enumerable<familyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for families.
     */
    cursor?: familyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` families.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of families.
     */
    distinct?: Enumerable<FamilyScalarFieldEnum>
  }


  /**
   * family findMany
   */
  export type familyFindManyArgs = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
    /**
     * Filter, which families to fetch.
     */
    where?: familyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of families to fetch.
     */
    orderBy?: Enumerable<familyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing families.
     */
    cursor?: familyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` families.
     */
    skip?: number
    distinct?: Enumerable<FamilyScalarFieldEnum>
  }


  /**
   * family create
   */
  export type familyCreateArgs = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
    /**
     * The data needed to create a family.
     */
    data: XOR<familyCreateInput, familyUncheckedCreateInput>
  }


  /**
   * family createMany
   */
  export type familyCreateManyArgs = {
    /**
     * The data used to create many families.
     */
    data: Enumerable<familyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * family update
   */
  export type familyUpdateArgs = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
    /**
     * The data needed to update a family.
     */
    data: XOR<familyUpdateInput, familyUncheckedUpdateInput>
    /**
     * Choose, which family to update.
     */
    where: familyWhereUniqueInput
  }


  /**
   * family updateMany
   */
  export type familyUpdateManyArgs = {
    /**
     * The data used to update families.
     */
    data: XOR<familyUpdateManyMutationInput, familyUncheckedUpdateManyInput>
    /**
     * Filter which families to update
     */
    where?: familyWhereInput
  }


  /**
   * family upsert
   */
  export type familyUpsertArgs = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
    /**
     * The filter to search for the family to update in case it exists.
     */
    where: familyWhereUniqueInput
    /**
     * In case the family found by the `where` argument doesn't exist, create a new family with this data.
     */
    create: XOR<familyCreateInput, familyUncheckedCreateInput>
    /**
     * In case the family was found with the provided `where` argument, update it with this data.
     */
    update: XOR<familyUpdateInput, familyUncheckedUpdateInput>
  }


  /**
   * family delete
   */
  export type familyDeleteArgs = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
    /**
     * Filter which family to delete.
     */
    where: familyWhereUniqueInput
  }


  /**
   * family deleteMany
   */
  export type familyDeleteManyArgs = {
    /**
     * Filter which families to delete
     */
    where?: familyWhereInput
  }


  /**
   * family.User
   */
  export type family$UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * family.childs
   */
  export type family$childsArgs = {
    /**
     * Select specific fields to fetch from the childs
     */
    select?: childsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: childsInclude | null
    where?: childsWhereInput
    orderBy?: Enumerable<childsOrderByWithRelationInput>
    cursor?: childsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChildsScalarFieldEnum>
  }


  /**
   * family without action
   */
  export type familyArgs = {
    /**
     * Select specific fields to fetch from the family
     */
    select?: familySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: familyInclude | null
  }



  /**
   * Model activities
   */


  export type AggregateActivities = {
    _count: ActivitiesCountAggregateOutputType | null
    _avg: ActivitiesAvgAggregateOutputType | null
    _sum: ActivitiesSumAggregateOutputType | null
    _min: ActivitiesMinAggregateOutputType | null
    _max: ActivitiesMaxAggregateOutputType | null
  }

  export type ActivitiesAvgAggregateOutputType = {
    id: number | null
    branchesId: number | null
  }

  export type ActivitiesSumAggregateOutputType = {
    id: number | null
    branchesId: number | null
  }

  export type ActivitiesMinAggregateOutputType = {
    id: number | null
    date: Date | null
    name: string | null
    fileDate: Date | null
    filePath: string | null
    branchesId: number | null
  }

  export type ActivitiesMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    name: string | null
    fileDate: Date | null
    filePath: string | null
    branchesId: number | null
  }

  export type ActivitiesCountAggregateOutputType = {
    id: number
    date: number
    name: number
    fileDate: number
    filePath: number
    assistence: number
    branchesId: number
    _all: number
  }


  export type ActivitiesAvgAggregateInputType = {
    id?: true
    branchesId?: true
  }

  export type ActivitiesSumAggregateInputType = {
    id?: true
    branchesId?: true
  }

  export type ActivitiesMinAggregateInputType = {
    id?: true
    date?: true
    name?: true
    fileDate?: true
    filePath?: true
    branchesId?: true
  }

  export type ActivitiesMaxAggregateInputType = {
    id?: true
    date?: true
    name?: true
    fileDate?: true
    filePath?: true
    branchesId?: true
  }

  export type ActivitiesCountAggregateInputType = {
    id?: true
    date?: true
    name?: true
    fileDate?: true
    filePath?: true
    assistence?: true
    branchesId?: true
    _all?: true
  }

  export type ActivitiesAggregateArgs = {
    /**
     * Filter which activities to aggregate.
     */
    where?: activitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: Enumerable<activitiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: activitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned activities
    **/
    _count?: true | ActivitiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivitiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivitiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivitiesMaxAggregateInputType
  }

  export type GetActivitiesAggregateType<T extends ActivitiesAggregateArgs> = {
        [P in keyof T & keyof AggregateActivities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivities[P]>
      : GetScalarType<T[P], AggregateActivities[P]>
  }




  export type ActivitiesGroupByArgs = {
    where?: activitiesWhereInput
    orderBy?: Enumerable<activitiesOrderByWithAggregationInput>
    by: ActivitiesScalarFieldEnum[]
    having?: activitiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivitiesCountAggregateInputType | true
    _avg?: ActivitiesAvgAggregateInputType
    _sum?: ActivitiesSumAggregateInputType
    _min?: ActivitiesMinAggregateInputType
    _max?: ActivitiesMaxAggregateInputType
  }


  export type ActivitiesGroupByOutputType = {
    id: number
    date: Date
    name: string
    fileDate: Date | null
    filePath: string | null
    assistence: JsonValue
    branchesId: number
    _count: ActivitiesCountAggregateOutputType | null
    _avg: ActivitiesAvgAggregateOutputType | null
    _sum: ActivitiesSumAggregateOutputType | null
    _min: ActivitiesMinAggregateOutputType | null
    _max: ActivitiesMaxAggregateOutputType | null
  }

  type GetActivitiesGroupByPayload<T extends ActivitiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ActivitiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivitiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivitiesGroupByOutputType[P]>
            : GetScalarType<T[P], ActivitiesGroupByOutputType[P]>
        }
      >
    >


  export type activitiesSelect = {
    id?: boolean
    date?: boolean
    name?: boolean
    fileDate?: boolean
    filePath?: boolean
    assistence?: boolean
    branchesId?: boolean
    branch?: boolean | branchesArgs
  }


  export type activitiesInclude = {
    branch?: boolean | branchesArgs
  }

  export type activitiesGetPayload<S extends boolean | null | undefined | activitiesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? activities :
    S extends undefined ? never :
    S extends { include: any } & (activitiesArgs | activitiesFindManyArgs)
    ? activities  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'branch' ? branchesGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (activitiesArgs | activitiesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'branch' ? branchesGetPayload<S['select'][P]> :  P extends keyof activities ? activities[P] : never
  } 
      : activities


  type activitiesCountArgs = 
    Omit<activitiesFindManyArgs, 'select' | 'include'> & {
      select?: ActivitiesCountAggregateInputType | true
    }

  export interface activitiesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Activities that matches the filter.
     * @param {activitiesFindUniqueArgs} args - Arguments to find a Activities
     * @example
     * // Get one Activities
     * const activities = await prisma.activities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends activitiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, activitiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'activities'> extends True ? Prisma__activitiesClient<activitiesGetPayload<T>> : Prisma__activitiesClient<activitiesGetPayload<T> | null, null>

    /**
     * Find one Activities that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {activitiesFindUniqueOrThrowArgs} args - Arguments to find a Activities
     * @example
     * // Get one Activities
     * const activities = await prisma.activities.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends activitiesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, activitiesFindUniqueOrThrowArgs>
    ): Prisma__activitiesClient<activitiesGetPayload<T>>

    /**
     * Find the first Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activitiesFindFirstArgs} args - Arguments to find a Activities
     * @example
     * // Get one Activities
     * const activities = await prisma.activities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends activitiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, activitiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'activities'> extends True ? Prisma__activitiesClient<activitiesGetPayload<T>> : Prisma__activitiesClient<activitiesGetPayload<T> | null, null>

    /**
     * Find the first Activities that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activitiesFindFirstOrThrowArgs} args - Arguments to find a Activities
     * @example
     * // Get one Activities
     * const activities = await prisma.activities.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends activitiesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, activitiesFindFirstOrThrowArgs>
    ): Prisma__activitiesClient<activitiesGetPayload<T>>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activitiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activities.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activities.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activitiesWithIdOnly = await prisma.activities.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends activitiesFindManyArgs>(
      args?: SelectSubset<T, activitiesFindManyArgs>
    ): Prisma.PrismaPromise<Array<activitiesGetPayload<T>>>

    /**
     * Create a Activities.
     * @param {activitiesCreateArgs} args - Arguments to create a Activities.
     * @example
     * // Create one Activities
     * const Activities = await prisma.activities.create({
     *   data: {
     *     // ... data to create a Activities
     *   }
     * })
     * 
    **/
    create<T extends activitiesCreateArgs>(
      args: SelectSubset<T, activitiesCreateArgs>
    ): Prisma__activitiesClient<activitiesGetPayload<T>>

    /**
     * Create many Activities.
     *     @param {activitiesCreateManyArgs} args - Arguments to create many Activities.
     *     @example
     *     // Create many Activities
     *     const activities = await prisma.activities.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends activitiesCreateManyArgs>(
      args?: SelectSubset<T, activitiesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Activities.
     * @param {activitiesDeleteArgs} args - Arguments to delete one Activities.
     * @example
     * // Delete one Activities
     * const Activities = await prisma.activities.delete({
     *   where: {
     *     // ... filter to delete one Activities
     *   }
     * })
     * 
    **/
    delete<T extends activitiesDeleteArgs>(
      args: SelectSubset<T, activitiesDeleteArgs>
    ): Prisma__activitiesClient<activitiesGetPayload<T>>

    /**
     * Update one Activities.
     * @param {activitiesUpdateArgs} args - Arguments to update one Activities.
     * @example
     * // Update one Activities
     * const activities = await prisma.activities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends activitiesUpdateArgs>(
      args: SelectSubset<T, activitiesUpdateArgs>
    ): Prisma__activitiesClient<activitiesGetPayload<T>>

    /**
     * Delete zero or more Activities.
     * @param {activitiesDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends activitiesDeleteManyArgs>(
      args?: SelectSubset<T, activitiesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activitiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activities = await prisma.activities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends activitiesUpdateManyArgs>(
      args: SelectSubset<T, activitiesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activities.
     * @param {activitiesUpsertArgs} args - Arguments to update or create a Activities.
     * @example
     * // Update or create a Activities
     * const activities = await prisma.activities.upsert({
     *   create: {
     *     // ... data to create a Activities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activities we want to update
     *   }
     * })
    **/
    upsert<T extends activitiesUpsertArgs>(
      args: SelectSubset<T, activitiesUpsertArgs>
    ): Prisma__activitiesClient<activitiesGetPayload<T>>

    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activitiesCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activities.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends activitiesCountArgs>(
      args?: Subset<T, activitiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivitiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivitiesAggregateArgs>(args: Subset<T, ActivitiesAggregateArgs>): Prisma.PrismaPromise<GetActivitiesAggregateType<T>>

    /**
     * Group by Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivitiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivitiesGroupByArgs['orderBy'] }
        : { orderBy?: ActivitiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivitiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivitiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for activities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__activitiesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    branch<T extends branchesArgs= {}>(args?: Subset<T, branchesArgs>): Prisma__branchesClient<branchesGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * activities base type for findUnique actions
   */
  export type activitiesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
    /**
     * Filter, which activities to fetch.
     */
    where: activitiesWhereUniqueInput
  }

  /**
   * activities findUnique
   */
  export interface activitiesFindUniqueArgs extends activitiesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * activities findUniqueOrThrow
   */
  export type activitiesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
    /**
     * Filter, which activities to fetch.
     */
    where: activitiesWhereUniqueInput
  }


  /**
   * activities base type for findFirst actions
   */
  export type activitiesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
    /**
     * Filter, which activities to fetch.
     */
    where?: activitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: Enumerable<activitiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for activities.
     */
    cursor?: activitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of activities.
     */
    distinct?: Enumerable<ActivitiesScalarFieldEnum>
  }

  /**
   * activities findFirst
   */
  export interface activitiesFindFirstArgs extends activitiesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * activities findFirstOrThrow
   */
  export type activitiesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
    /**
     * Filter, which activities to fetch.
     */
    where?: activitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: Enumerable<activitiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for activities.
     */
    cursor?: activitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of activities.
     */
    distinct?: Enumerable<ActivitiesScalarFieldEnum>
  }


  /**
   * activities findMany
   */
  export type activitiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
    /**
     * Filter, which activities to fetch.
     */
    where?: activitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: Enumerable<activitiesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing activities.
     */
    cursor?: activitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    distinct?: Enumerable<ActivitiesScalarFieldEnum>
  }


  /**
   * activities create
   */
  export type activitiesCreateArgs = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
    /**
     * The data needed to create a activities.
     */
    data: XOR<activitiesCreateInput, activitiesUncheckedCreateInput>
  }


  /**
   * activities createMany
   */
  export type activitiesCreateManyArgs = {
    /**
     * The data used to create many activities.
     */
    data: Enumerable<activitiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * activities update
   */
  export type activitiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
    /**
     * The data needed to update a activities.
     */
    data: XOR<activitiesUpdateInput, activitiesUncheckedUpdateInput>
    /**
     * Choose, which activities to update.
     */
    where: activitiesWhereUniqueInput
  }


  /**
   * activities updateMany
   */
  export type activitiesUpdateManyArgs = {
    /**
     * The data used to update activities.
     */
    data: XOR<activitiesUpdateManyMutationInput, activitiesUncheckedUpdateManyInput>
    /**
     * Filter which activities to update
     */
    where?: activitiesWhereInput
  }


  /**
   * activities upsert
   */
  export type activitiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
    /**
     * The filter to search for the activities to update in case it exists.
     */
    where: activitiesWhereUniqueInput
    /**
     * In case the activities found by the `where` argument doesn't exist, create a new activities with this data.
     */
    create: XOR<activitiesCreateInput, activitiesUncheckedCreateInput>
    /**
     * In case the activities was found with the provided `where` argument, update it with this data.
     */
    update: XOR<activitiesUpdateInput, activitiesUncheckedUpdateInput>
  }


  /**
   * activities delete
   */
  export type activitiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
    /**
     * Filter which activities to delete.
     */
    where: activitiesWhereUniqueInput
  }


  /**
   * activities deleteMany
   */
  export type activitiesDeleteManyArgs = {
    /**
     * Filter which activities to delete
     */
    where?: activitiesWhereInput
  }


  /**
   * activities without action
   */
  export type activitiesArgs = {
    /**
     * Select specific fields to fetch from the activities
     */
    select?: activitiesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: activitiesInclude | null
  }



  /**
   * Model files
   */


  export type AggregateFiles = {
    _count: FilesCountAggregateOutputType | null
    _avg: FilesAvgAggregateOutputType | null
    _sum: FilesSumAggregateOutputType | null
    _min: FilesMinAggregateOutputType | null
    _max: FilesMaxAggregateOutputType | null
  }

  export type FilesAvgAggregateOutputType = {
    id: number | null
    branchesId: number | null
    userId: number | null
  }

  export type FilesSumAggregateOutputType = {
    id: number | null
    branchesId: number | null
    userId: number | null
  }

  export type FilesMinAggregateOutputType = {
    id: number | null
    name: string | null
    text: string | null
    max_update_date: Date | null
    file_path: string | null
    branchesId: number | null
    global: boolean | null
    userId: number | null
  }

  export type FilesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    text: string | null
    max_update_date: Date | null
    file_path: string | null
    branchesId: number | null
    global: boolean | null
    userId: number | null
  }

  export type FilesCountAggregateOutputType = {
    id: number
    name: number
    text: number
    max_update_date: number
    file_path: number
    branchesId: number
    global: number
    userId: number
    _all: number
  }


  export type FilesAvgAggregateInputType = {
    id?: true
    branchesId?: true
    userId?: true
  }

  export type FilesSumAggregateInputType = {
    id?: true
    branchesId?: true
    userId?: true
  }

  export type FilesMinAggregateInputType = {
    id?: true
    name?: true
    text?: true
    max_update_date?: true
    file_path?: true
    branchesId?: true
    global?: true
    userId?: true
  }

  export type FilesMaxAggregateInputType = {
    id?: true
    name?: true
    text?: true
    max_update_date?: true
    file_path?: true
    branchesId?: true
    global?: true
    userId?: true
  }

  export type FilesCountAggregateInputType = {
    id?: true
    name?: true
    text?: true
    max_update_date?: true
    file_path?: true
    branchesId?: true
    global?: true
    userId?: true
    _all?: true
  }

  export type FilesAggregateArgs = {
    /**
     * Filter which files to aggregate.
     */
    where?: filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of files to fetch.
     */
    orderBy?: Enumerable<filesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned files
    **/
    _count?: true | FilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FilesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FilesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FilesMaxAggregateInputType
  }

  export type GetFilesAggregateType<T extends FilesAggregateArgs> = {
        [P in keyof T & keyof AggregateFiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFiles[P]>
      : GetScalarType<T[P], AggregateFiles[P]>
  }




  export type FilesGroupByArgs = {
    where?: filesWhereInput
    orderBy?: Enumerable<filesOrderByWithAggregationInput>
    by: FilesScalarFieldEnum[]
    having?: filesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FilesCountAggregateInputType | true
    _avg?: FilesAvgAggregateInputType
    _sum?: FilesSumAggregateInputType
    _min?: FilesMinAggregateInputType
    _max?: FilesMaxAggregateInputType
  }


  export type FilesGroupByOutputType = {
    id: number
    name: string
    text: string
    max_update_date: Date
    file_path: string
    branchesId: number
    global: boolean
    userId: number
    _count: FilesCountAggregateOutputType | null
    _avg: FilesAvgAggregateOutputType | null
    _sum: FilesSumAggregateOutputType | null
    _min: FilesMinAggregateOutputType | null
    _max: FilesMaxAggregateOutputType | null
  }

  type GetFilesGroupByPayload<T extends FilesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FilesGroupByOutputType[P]>
            : GetScalarType<T[P], FilesGroupByOutputType[P]>
        }
      >
    >


  export type filesSelect = {
    id?: boolean
    name?: boolean
    text?: boolean
    max_update_date?: boolean
    file_path?: boolean
    branchesId?: boolean
    global?: boolean
    userId?: boolean
    branch?: boolean | branchesArgs
    author?: boolean | UserArgs
  }


  export type filesInclude = {
    branch?: boolean | branchesArgs
    author?: boolean | UserArgs
  }

  export type filesGetPayload<S extends boolean | null | undefined | filesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? files :
    S extends undefined ? never :
    S extends { include: any } & (filesArgs | filesFindManyArgs)
    ? files  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'branch' ? branchesGetPayload<S['include'][P]> :
        P extends 'author' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (filesArgs | filesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'branch' ? branchesGetPayload<S['select'][P]> :
        P extends 'author' ? UserGetPayload<S['select'][P]> :  P extends keyof files ? files[P] : never
  } 
      : files


  type filesCountArgs = 
    Omit<filesFindManyArgs, 'select' | 'include'> & {
      select?: FilesCountAggregateInputType | true
    }

  export interface filesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Files that matches the filter.
     * @param {filesFindUniqueArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends filesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, filesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'files'> extends True ? Prisma__filesClient<filesGetPayload<T>> : Prisma__filesClient<filesGetPayload<T> | null, null>

    /**
     * Find one Files that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {filesFindUniqueOrThrowArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends filesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, filesFindUniqueOrThrowArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Find the first Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filesFindFirstArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends filesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, filesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'files'> extends True ? Prisma__filesClient<filesGetPayload<T>> : Prisma__filesClient<filesGetPayload<T> | null, null>

    /**
     * Find the first Files that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filesFindFirstOrThrowArgs} args - Arguments to find a Files
     * @example
     * // Get one Files
     * const files = await prisma.files.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends filesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, filesFindFirstOrThrowArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.files.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.files.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const filesWithIdOnly = await prisma.files.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends filesFindManyArgs>(
      args?: SelectSubset<T, filesFindManyArgs>
    ): Prisma.PrismaPromise<Array<filesGetPayload<T>>>

    /**
     * Create a Files.
     * @param {filesCreateArgs} args - Arguments to create a Files.
     * @example
     * // Create one Files
     * const Files = await prisma.files.create({
     *   data: {
     *     // ... data to create a Files
     *   }
     * })
     * 
    **/
    create<T extends filesCreateArgs>(
      args: SelectSubset<T, filesCreateArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Create many Files.
     *     @param {filesCreateManyArgs} args - Arguments to create many Files.
     *     @example
     *     // Create many Files
     *     const files = await prisma.files.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends filesCreateManyArgs>(
      args?: SelectSubset<T, filesCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Files.
     * @param {filesDeleteArgs} args - Arguments to delete one Files.
     * @example
     * // Delete one Files
     * const Files = await prisma.files.delete({
     *   where: {
     *     // ... filter to delete one Files
     *   }
     * })
     * 
    **/
    delete<T extends filesDeleteArgs>(
      args: SelectSubset<T, filesDeleteArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Update one Files.
     * @param {filesUpdateArgs} args - Arguments to update one Files.
     * @example
     * // Update one Files
     * const files = await prisma.files.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends filesUpdateArgs>(
      args: SelectSubset<T, filesUpdateArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Delete zero or more Files.
     * @param {filesDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.files.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends filesDeleteManyArgs>(
      args?: SelectSubset<T, filesDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const files = await prisma.files.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends filesUpdateManyArgs>(
      args: SelectSubset<T, filesUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Files.
     * @param {filesUpsertArgs} args - Arguments to update or create a Files.
     * @example
     * // Update or create a Files
     * const files = await prisma.files.upsert({
     *   create: {
     *     // ... data to create a Files
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Files we want to update
     *   }
     * })
    **/
    upsert<T extends filesUpsertArgs>(
      args: SelectSubset<T, filesUpsertArgs>
    ): Prisma__filesClient<filesGetPayload<T>>

    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filesCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.files.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends filesCountArgs>(
      args?: Subset<T, filesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FilesAggregateArgs>(args: Subset<T, FilesAggregateArgs>): Prisma.PrismaPromise<GetFilesAggregateType<T>>

    /**
     * Group by Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FilesGroupByArgs['orderBy'] }
        : { orderBy?: FilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for files.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__filesClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    branch<T extends branchesArgs= {}>(args?: Subset<T, branchesArgs>): Prisma__branchesClient<branchesGetPayload<T> | Null>;

    author<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * files base type for findUnique actions
   */
  export type filesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    /**
     * Filter, which files to fetch.
     */
    where: filesWhereUniqueInput
  }

  /**
   * files findUnique
   */
  export interface filesFindUniqueArgs extends filesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * files findUniqueOrThrow
   */
  export type filesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    /**
     * Filter, which files to fetch.
     */
    where: filesWhereUniqueInput
  }


  /**
   * files base type for findFirst actions
   */
  export type filesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    /**
     * Filter, which files to fetch.
     */
    where?: filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of files to fetch.
     */
    orderBy?: Enumerable<filesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for files.
     */
    cursor?: filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of files.
     */
    distinct?: Enumerable<FilesScalarFieldEnum>
  }

  /**
   * files findFirst
   */
  export interface filesFindFirstArgs extends filesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * files findFirstOrThrow
   */
  export type filesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    /**
     * Filter, which files to fetch.
     */
    where?: filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of files to fetch.
     */
    orderBy?: Enumerable<filesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for files.
     */
    cursor?: filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of files.
     */
    distinct?: Enumerable<FilesScalarFieldEnum>
  }


  /**
   * files findMany
   */
  export type filesFindManyArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    /**
     * Filter, which files to fetch.
     */
    where?: filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of files to fetch.
     */
    orderBy?: Enumerable<filesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing files.
     */
    cursor?: filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` files.
     */
    skip?: number
    distinct?: Enumerable<FilesScalarFieldEnum>
  }


  /**
   * files create
   */
  export type filesCreateArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    /**
     * The data needed to create a files.
     */
    data: XOR<filesCreateInput, filesUncheckedCreateInput>
  }


  /**
   * files createMany
   */
  export type filesCreateManyArgs = {
    /**
     * The data used to create many files.
     */
    data: Enumerable<filesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * files update
   */
  export type filesUpdateArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    /**
     * The data needed to update a files.
     */
    data: XOR<filesUpdateInput, filesUncheckedUpdateInput>
    /**
     * Choose, which files to update.
     */
    where: filesWhereUniqueInput
  }


  /**
   * files updateMany
   */
  export type filesUpdateManyArgs = {
    /**
     * The data used to update files.
     */
    data: XOR<filesUpdateManyMutationInput, filesUncheckedUpdateManyInput>
    /**
     * Filter which files to update
     */
    where?: filesWhereInput
  }


  /**
   * files upsert
   */
  export type filesUpsertArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    /**
     * The filter to search for the files to update in case it exists.
     */
    where: filesWhereUniqueInput
    /**
     * In case the files found by the `where` argument doesn't exist, create a new files with this data.
     */
    create: XOR<filesCreateInput, filesUncheckedCreateInput>
    /**
     * In case the files was found with the provided `where` argument, update it with this data.
     */
    update: XOR<filesUpdateInput, filesUncheckedUpdateInput>
  }


  /**
   * files delete
   */
  export type filesDeleteArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    /**
     * Filter which files to delete.
     */
    where: filesWhereUniqueInput
  }


  /**
   * files deleteMany
   */
  export type filesDeleteManyArgs = {
    /**
     * Filter which files to delete
     */
    where?: filesWhereInput
  }


  /**
   * files without action
   */
  export type filesArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
  }



  /**
   * Model forms_sleep
   */


  export type AggregateForms_sleep = {
    _count: Forms_sleepCountAggregateOutputType | null
    _avg: Forms_sleepAvgAggregateOutputType | null
    _sum: Forms_sleepSumAggregateOutputType | null
    _min: Forms_sleepMinAggregateOutputType | null
    _max: Forms_sleepMaxAggregateOutputType | null
  }

  export type Forms_sleepAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type Forms_sleepSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type Forms_sleepMinAggregateOutputType = {
    id: number | null
    name: string | null
    capsQuatitiy: string | null
    childQuatitiy: string | null
    comments: string | null
    confirmed: boolean | null
    dateIn: Date | null
    dateOut: Date | null
    email: string | null
    firstName: string | null
    group: string | null
    phone: string | null
    userId: number | null
  }

  export type Forms_sleepMaxAggregateOutputType = {
    id: number | null
    name: string | null
    capsQuatitiy: string | null
    childQuatitiy: string | null
    comments: string | null
    confirmed: boolean | null
    dateIn: Date | null
    dateOut: Date | null
    email: string | null
    firstName: string | null
    group: string | null
    phone: string | null
    userId: number | null
  }

  export type Forms_sleepCountAggregateOutputType = {
    id: number
    name: number
    capsQuatitiy: number
    childQuatitiy: number
    comments: number
    confirmed: number
    dateIn: number
    dateOut: number
    email: number
    firstName: number
    group: number
    phone: number
    userId: number
    _all: number
  }


  export type Forms_sleepAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type Forms_sleepSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type Forms_sleepMinAggregateInputType = {
    id?: true
    name?: true
    capsQuatitiy?: true
    childQuatitiy?: true
    comments?: true
    confirmed?: true
    dateIn?: true
    dateOut?: true
    email?: true
    firstName?: true
    group?: true
    phone?: true
    userId?: true
  }

  export type Forms_sleepMaxAggregateInputType = {
    id?: true
    name?: true
    capsQuatitiy?: true
    childQuatitiy?: true
    comments?: true
    confirmed?: true
    dateIn?: true
    dateOut?: true
    email?: true
    firstName?: true
    group?: true
    phone?: true
    userId?: true
  }

  export type Forms_sleepCountAggregateInputType = {
    id?: true
    name?: true
    capsQuatitiy?: true
    childQuatitiy?: true
    comments?: true
    confirmed?: true
    dateIn?: true
    dateOut?: true
    email?: true
    firstName?: true
    group?: true
    phone?: true
    userId?: true
    _all?: true
  }

  export type Forms_sleepAggregateArgs = {
    /**
     * Filter which forms_sleep to aggregate.
     */
    where?: forms_sleepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms_sleeps to fetch.
     */
    orderBy?: Enumerable<forms_sleepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: forms_sleepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms_sleeps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms_sleeps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned forms_sleeps
    **/
    _count?: true | Forms_sleepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Forms_sleepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Forms_sleepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Forms_sleepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Forms_sleepMaxAggregateInputType
  }

  export type GetForms_sleepAggregateType<T extends Forms_sleepAggregateArgs> = {
        [P in keyof T & keyof AggregateForms_sleep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForms_sleep[P]>
      : GetScalarType<T[P], AggregateForms_sleep[P]>
  }




  export type Forms_sleepGroupByArgs = {
    where?: forms_sleepWhereInput
    orderBy?: Enumerable<forms_sleepOrderByWithAggregationInput>
    by: Forms_sleepScalarFieldEnum[]
    having?: forms_sleepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Forms_sleepCountAggregateInputType | true
    _avg?: Forms_sleepAvgAggregateInputType
    _sum?: Forms_sleepSumAggregateInputType
    _min?: Forms_sleepMinAggregateInputType
    _max?: Forms_sleepMaxAggregateInputType
  }


  export type Forms_sleepGroupByOutputType = {
    id: number
    name: string
    capsQuatitiy: string
    childQuatitiy: string
    comments: string
    confirmed: boolean
    dateIn: Date
    dateOut: Date
    email: string
    firstName: string
    group: string
    phone: string
    userId: number | null
    _count: Forms_sleepCountAggregateOutputType | null
    _avg: Forms_sleepAvgAggregateOutputType | null
    _sum: Forms_sleepSumAggregateOutputType | null
    _min: Forms_sleepMinAggregateOutputType | null
    _max: Forms_sleepMaxAggregateOutputType | null
  }

  type GetForms_sleepGroupByPayload<T extends Forms_sleepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Forms_sleepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Forms_sleepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Forms_sleepGroupByOutputType[P]>
            : GetScalarType<T[P], Forms_sleepGroupByOutputType[P]>
        }
      >
    >


  export type forms_sleepSelect = {
    id?: boolean
    name?: boolean
    capsQuatitiy?: boolean
    childQuatitiy?: boolean
    comments?: boolean
    confirmed?: boolean
    dateIn?: boolean
    dateOut?: boolean
    email?: boolean
    firstName?: boolean
    group?: boolean
    phone?: boolean
    userId?: boolean
    confirmed_by?: boolean | UserArgs
  }


  export type forms_sleepInclude = {
    confirmed_by?: boolean | UserArgs
  }

  export type forms_sleepGetPayload<S extends boolean | null | undefined | forms_sleepArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? forms_sleep :
    S extends undefined ? never :
    S extends { include: any } & (forms_sleepArgs | forms_sleepFindManyArgs)
    ? forms_sleep  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'confirmed_by' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (forms_sleepArgs | forms_sleepFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'confirmed_by' ? UserGetPayload<S['select'][P]> | null :  P extends keyof forms_sleep ? forms_sleep[P] : never
  } 
      : forms_sleep


  type forms_sleepCountArgs = 
    Omit<forms_sleepFindManyArgs, 'select' | 'include'> & {
      select?: Forms_sleepCountAggregateInputType | true
    }

  export interface forms_sleepDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Forms_sleep that matches the filter.
     * @param {forms_sleepFindUniqueArgs} args - Arguments to find a Forms_sleep
     * @example
     * // Get one Forms_sleep
     * const forms_sleep = await prisma.forms_sleep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends forms_sleepFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, forms_sleepFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'forms_sleep'> extends True ? Prisma__forms_sleepClient<forms_sleepGetPayload<T>> : Prisma__forms_sleepClient<forms_sleepGetPayload<T> | null, null>

    /**
     * Find one Forms_sleep that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {forms_sleepFindUniqueOrThrowArgs} args - Arguments to find a Forms_sleep
     * @example
     * // Get one Forms_sleep
     * const forms_sleep = await prisma.forms_sleep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends forms_sleepFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, forms_sleepFindUniqueOrThrowArgs>
    ): Prisma__forms_sleepClient<forms_sleepGetPayload<T>>

    /**
     * Find the first Forms_sleep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {forms_sleepFindFirstArgs} args - Arguments to find a Forms_sleep
     * @example
     * // Get one Forms_sleep
     * const forms_sleep = await prisma.forms_sleep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends forms_sleepFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, forms_sleepFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'forms_sleep'> extends True ? Prisma__forms_sleepClient<forms_sleepGetPayload<T>> : Prisma__forms_sleepClient<forms_sleepGetPayload<T> | null, null>

    /**
     * Find the first Forms_sleep that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {forms_sleepFindFirstOrThrowArgs} args - Arguments to find a Forms_sleep
     * @example
     * // Get one Forms_sleep
     * const forms_sleep = await prisma.forms_sleep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends forms_sleepFindFirstOrThrowArgs>(
      args?: SelectSubset<T, forms_sleepFindFirstOrThrowArgs>
    ): Prisma__forms_sleepClient<forms_sleepGetPayload<T>>

    /**
     * Find zero or more Forms_sleeps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {forms_sleepFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Forms_sleeps
     * const forms_sleeps = await prisma.forms_sleep.findMany()
     * 
     * // Get first 10 Forms_sleeps
     * const forms_sleeps = await prisma.forms_sleep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forms_sleepWithIdOnly = await prisma.forms_sleep.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends forms_sleepFindManyArgs>(
      args?: SelectSubset<T, forms_sleepFindManyArgs>
    ): Prisma.PrismaPromise<Array<forms_sleepGetPayload<T>>>

    /**
     * Create a Forms_sleep.
     * @param {forms_sleepCreateArgs} args - Arguments to create a Forms_sleep.
     * @example
     * // Create one Forms_sleep
     * const Forms_sleep = await prisma.forms_sleep.create({
     *   data: {
     *     // ... data to create a Forms_sleep
     *   }
     * })
     * 
    **/
    create<T extends forms_sleepCreateArgs>(
      args: SelectSubset<T, forms_sleepCreateArgs>
    ): Prisma__forms_sleepClient<forms_sleepGetPayload<T>>

    /**
     * Create many Forms_sleeps.
     *     @param {forms_sleepCreateManyArgs} args - Arguments to create many Forms_sleeps.
     *     @example
     *     // Create many Forms_sleeps
     *     const forms_sleep = await prisma.forms_sleep.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends forms_sleepCreateManyArgs>(
      args?: SelectSubset<T, forms_sleepCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Forms_sleep.
     * @param {forms_sleepDeleteArgs} args - Arguments to delete one Forms_sleep.
     * @example
     * // Delete one Forms_sleep
     * const Forms_sleep = await prisma.forms_sleep.delete({
     *   where: {
     *     // ... filter to delete one Forms_sleep
     *   }
     * })
     * 
    **/
    delete<T extends forms_sleepDeleteArgs>(
      args: SelectSubset<T, forms_sleepDeleteArgs>
    ): Prisma__forms_sleepClient<forms_sleepGetPayload<T>>

    /**
     * Update one Forms_sleep.
     * @param {forms_sleepUpdateArgs} args - Arguments to update one Forms_sleep.
     * @example
     * // Update one Forms_sleep
     * const forms_sleep = await prisma.forms_sleep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends forms_sleepUpdateArgs>(
      args: SelectSubset<T, forms_sleepUpdateArgs>
    ): Prisma__forms_sleepClient<forms_sleepGetPayload<T>>

    /**
     * Delete zero or more Forms_sleeps.
     * @param {forms_sleepDeleteManyArgs} args - Arguments to filter Forms_sleeps to delete.
     * @example
     * // Delete a few Forms_sleeps
     * const { count } = await prisma.forms_sleep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends forms_sleepDeleteManyArgs>(
      args?: SelectSubset<T, forms_sleepDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Forms_sleeps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {forms_sleepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Forms_sleeps
     * const forms_sleep = await prisma.forms_sleep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends forms_sleepUpdateManyArgs>(
      args: SelectSubset<T, forms_sleepUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Forms_sleep.
     * @param {forms_sleepUpsertArgs} args - Arguments to update or create a Forms_sleep.
     * @example
     * // Update or create a Forms_sleep
     * const forms_sleep = await prisma.forms_sleep.upsert({
     *   create: {
     *     // ... data to create a Forms_sleep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Forms_sleep we want to update
     *   }
     * })
    **/
    upsert<T extends forms_sleepUpsertArgs>(
      args: SelectSubset<T, forms_sleepUpsertArgs>
    ): Prisma__forms_sleepClient<forms_sleepGetPayload<T>>

    /**
     * Count the number of Forms_sleeps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {forms_sleepCountArgs} args - Arguments to filter Forms_sleeps to count.
     * @example
     * // Count the number of Forms_sleeps
     * const count = await prisma.forms_sleep.count({
     *   where: {
     *     // ... the filter for the Forms_sleeps we want to count
     *   }
     * })
    **/
    count<T extends forms_sleepCountArgs>(
      args?: Subset<T, forms_sleepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Forms_sleepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Forms_sleep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Forms_sleepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Forms_sleepAggregateArgs>(args: Subset<T, Forms_sleepAggregateArgs>): Prisma.PrismaPromise<GetForms_sleepAggregateType<T>>

    /**
     * Group by Forms_sleep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Forms_sleepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Forms_sleepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Forms_sleepGroupByArgs['orderBy'] }
        : { orderBy?: Forms_sleepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Forms_sleepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForms_sleepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for forms_sleep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__forms_sleepClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    confirmed_by<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * forms_sleep base type for findUnique actions
   */
  export type forms_sleepFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
    /**
     * Filter, which forms_sleep to fetch.
     */
    where: forms_sleepWhereUniqueInput
  }

  /**
   * forms_sleep findUnique
   */
  export interface forms_sleepFindUniqueArgs extends forms_sleepFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * forms_sleep findUniqueOrThrow
   */
  export type forms_sleepFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
    /**
     * Filter, which forms_sleep to fetch.
     */
    where: forms_sleepWhereUniqueInput
  }


  /**
   * forms_sleep base type for findFirst actions
   */
  export type forms_sleepFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
    /**
     * Filter, which forms_sleep to fetch.
     */
    where?: forms_sleepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms_sleeps to fetch.
     */
    orderBy?: Enumerable<forms_sleepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for forms_sleeps.
     */
    cursor?: forms_sleepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms_sleeps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms_sleeps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of forms_sleeps.
     */
    distinct?: Enumerable<Forms_sleepScalarFieldEnum>
  }

  /**
   * forms_sleep findFirst
   */
  export interface forms_sleepFindFirstArgs extends forms_sleepFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * forms_sleep findFirstOrThrow
   */
  export type forms_sleepFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
    /**
     * Filter, which forms_sleep to fetch.
     */
    where?: forms_sleepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms_sleeps to fetch.
     */
    orderBy?: Enumerable<forms_sleepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for forms_sleeps.
     */
    cursor?: forms_sleepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms_sleeps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms_sleeps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of forms_sleeps.
     */
    distinct?: Enumerable<Forms_sleepScalarFieldEnum>
  }


  /**
   * forms_sleep findMany
   */
  export type forms_sleepFindManyArgs = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
    /**
     * Filter, which forms_sleeps to fetch.
     */
    where?: forms_sleepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of forms_sleeps to fetch.
     */
    orderBy?: Enumerable<forms_sleepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing forms_sleeps.
     */
    cursor?: forms_sleepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` forms_sleeps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` forms_sleeps.
     */
    skip?: number
    distinct?: Enumerable<Forms_sleepScalarFieldEnum>
  }


  /**
   * forms_sleep create
   */
  export type forms_sleepCreateArgs = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
    /**
     * The data needed to create a forms_sleep.
     */
    data: XOR<forms_sleepCreateInput, forms_sleepUncheckedCreateInput>
  }


  /**
   * forms_sleep createMany
   */
  export type forms_sleepCreateManyArgs = {
    /**
     * The data used to create many forms_sleeps.
     */
    data: Enumerable<forms_sleepCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * forms_sleep update
   */
  export type forms_sleepUpdateArgs = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
    /**
     * The data needed to update a forms_sleep.
     */
    data: XOR<forms_sleepUpdateInput, forms_sleepUncheckedUpdateInput>
    /**
     * Choose, which forms_sleep to update.
     */
    where: forms_sleepWhereUniqueInput
  }


  /**
   * forms_sleep updateMany
   */
  export type forms_sleepUpdateManyArgs = {
    /**
     * The data used to update forms_sleeps.
     */
    data: XOR<forms_sleepUpdateManyMutationInput, forms_sleepUncheckedUpdateManyInput>
    /**
     * Filter which forms_sleeps to update
     */
    where?: forms_sleepWhereInput
  }


  /**
   * forms_sleep upsert
   */
  export type forms_sleepUpsertArgs = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
    /**
     * The filter to search for the forms_sleep to update in case it exists.
     */
    where: forms_sleepWhereUniqueInput
    /**
     * In case the forms_sleep found by the `where` argument doesn't exist, create a new forms_sleep with this data.
     */
    create: XOR<forms_sleepCreateInput, forms_sleepUncheckedCreateInput>
    /**
     * In case the forms_sleep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<forms_sleepUpdateInput, forms_sleepUncheckedUpdateInput>
  }


  /**
   * forms_sleep delete
   */
  export type forms_sleepDeleteArgs = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
    /**
     * Filter which forms_sleep to delete.
     */
    where: forms_sleepWhereUniqueInput
  }


  /**
   * forms_sleep deleteMany
   */
  export type forms_sleepDeleteManyArgs = {
    /**
     * Filter which forms_sleeps to delete
     */
    where?: forms_sleepWhereInput
  }


  /**
   * forms_sleep without action
   */
  export type forms_sleepArgs = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
  }



  /**
   * Model news
   */


  export type AggregateNews = {
    _count: NewsCountAggregateOutputType | null
    _avg: NewsAvgAggregateOutputType | null
    _sum: NewsSumAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  export type NewsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NewsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NewsMinAggregateOutputType = {
    id: number | null
    title: string | null
    text: string | null
    image_path: string | null
    global: boolean | null
    userId: number | null
  }

  export type NewsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    text: string | null
    image_path: string | null
    global: boolean | null
    userId: number | null
  }

  export type NewsCountAggregateOutputType = {
    id: number
    title: number
    text: number
    image_path: number
    global: number
    userId: number
    _all: number
  }


  export type NewsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NewsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NewsMinAggregateInputType = {
    id?: true
    title?: true
    text?: true
    image_path?: true
    global?: true
    userId?: true
  }

  export type NewsMaxAggregateInputType = {
    id?: true
    title?: true
    text?: true
    image_path?: true
    global?: true
    userId?: true
  }

  export type NewsCountAggregateInputType = {
    id?: true
    title?: true
    text?: true
    image_path?: true
    global?: true
    userId?: true
    _all?: true
  }

  export type NewsAggregateArgs = {
    /**
     * Filter which news to aggregate.
     */
    where?: newsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of news to fetch.
     */
    orderBy?: Enumerable<newsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` news from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` news.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned news
    **/
    _count?: true | NewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsMaxAggregateInputType
  }

  export type GetNewsAggregateType<T extends NewsAggregateArgs> = {
        [P in keyof T & keyof AggregateNews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNews[P]>
      : GetScalarType<T[P], AggregateNews[P]>
  }




  export type NewsGroupByArgs = {
    where?: newsWhereInput
    orderBy?: Enumerable<newsOrderByWithAggregationInput>
    by: NewsScalarFieldEnum[]
    having?: newsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCountAggregateInputType | true
    _avg?: NewsAvgAggregateInputType
    _sum?: NewsSumAggregateInputType
    _min?: NewsMinAggregateInputType
    _max?: NewsMaxAggregateInputType
  }


  export type NewsGroupByOutputType = {
    id: number
    title: string
    text: string
    image_path: string
    global: boolean
    userId: number
    _count: NewsCountAggregateOutputType | null
    _avg: NewsAvgAggregateOutputType | null
    _sum: NewsSumAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  type GetNewsGroupByPayload<T extends NewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsGroupByOutputType[P]>
            : GetScalarType<T[P], NewsGroupByOutputType[P]>
        }
      >
    >


  export type newsSelect = {
    id?: boolean
    title?: boolean
    text?: boolean
    image_path?: boolean
    global?: boolean
    userId?: boolean
    author?: boolean | UserArgs
  }


  export type newsInclude = {
    author?: boolean | UserArgs
  }

  export type newsGetPayload<S extends boolean | null | undefined | newsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? news :
    S extends undefined ? never :
    S extends { include: any } & (newsArgs | newsFindManyArgs)
    ? news  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'author' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (newsArgs | newsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'author' ? UserGetPayload<S['select'][P]> :  P extends keyof news ? news[P] : never
  } 
      : news


  type newsCountArgs = 
    Omit<newsFindManyArgs, 'select' | 'include'> & {
      select?: NewsCountAggregateInputType | true
    }

  export interface newsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one News that matches the filter.
     * @param {newsFindUniqueArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends newsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, newsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'news'> extends True ? Prisma__newsClient<newsGetPayload<T>> : Prisma__newsClient<newsGetPayload<T> | null, null>

    /**
     * Find one News that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {newsFindUniqueOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends newsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, newsFindUniqueOrThrowArgs>
    ): Prisma__newsClient<newsGetPayload<T>>

    /**
     * Find the first News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsFindFirstArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends newsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, newsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'news'> extends True ? Prisma__newsClient<newsGetPayload<T>> : Prisma__newsClient<newsGetPayload<T> | null, null>

    /**
     * Find the first News that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsFindFirstOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends newsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, newsFindFirstOrThrowArgs>
    ): Prisma__newsClient<newsGetPayload<T>>

    /**
     * Find zero or more News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all News
     * const news = await prisma.news.findMany()
     * 
     * // Get first 10 News
     * const news = await prisma.news.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsWithIdOnly = await prisma.news.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends newsFindManyArgs>(
      args?: SelectSubset<T, newsFindManyArgs>
    ): Prisma.PrismaPromise<Array<newsGetPayload<T>>>

    /**
     * Create a News.
     * @param {newsCreateArgs} args - Arguments to create a News.
     * @example
     * // Create one News
     * const News = await prisma.news.create({
     *   data: {
     *     // ... data to create a News
     *   }
     * })
     * 
    **/
    create<T extends newsCreateArgs>(
      args: SelectSubset<T, newsCreateArgs>
    ): Prisma__newsClient<newsGetPayload<T>>

    /**
     * Create many News.
     *     @param {newsCreateManyArgs} args - Arguments to create many News.
     *     @example
     *     // Create many News
     *     const news = await prisma.news.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends newsCreateManyArgs>(
      args?: SelectSubset<T, newsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a News.
     * @param {newsDeleteArgs} args - Arguments to delete one News.
     * @example
     * // Delete one News
     * const News = await prisma.news.delete({
     *   where: {
     *     // ... filter to delete one News
     *   }
     * })
     * 
    **/
    delete<T extends newsDeleteArgs>(
      args: SelectSubset<T, newsDeleteArgs>
    ): Prisma__newsClient<newsGetPayload<T>>

    /**
     * Update one News.
     * @param {newsUpdateArgs} args - Arguments to update one News.
     * @example
     * // Update one News
     * const news = await prisma.news.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends newsUpdateArgs>(
      args: SelectSubset<T, newsUpdateArgs>
    ): Prisma__newsClient<newsGetPayload<T>>

    /**
     * Delete zero or more News.
     * @param {newsDeleteManyArgs} args - Arguments to filter News to delete.
     * @example
     * // Delete a few News
     * const { count } = await prisma.news.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends newsDeleteManyArgs>(
      args?: SelectSubset<T, newsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many News
     * const news = await prisma.news.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends newsUpdateManyArgs>(
      args: SelectSubset<T, newsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one News.
     * @param {newsUpsertArgs} args - Arguments to update or create a News.
     * @example
     * // Update or create a News
     * const news = await prisma.news.upsert({
     *   create: {
     *     // ... data to create a News
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the News we want to update
     *   }
     * })
    **/
    upsert<T extends newsUpsertArgs>(
      args: SelectSubset<T, newsUpsertArgs>
    ): Prisma__newsClient<newsGetPayload<T>>

    /**
     * Count the number of News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {newsCountArgs} args - Arguments to filter News to count.
     * @example
     * // Count the number of News
     * const count = await prisma.news.count({
     *   where: {
     *     // ... the filter for the News we want to count
     *   }
     * })
    **/
    count<T extends newsCountArgs>(
      args?: Subset<T, newsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsAggregateArgs>(args: Subset<T, NewsAggregateArgs>): Prisma.PrismaPromise<GetNewsAggregateType<T>>

    /**
     * Group by News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsGroupByArgs['orderBy'] }
        : { orderBy?: NewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for news.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__newsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    author<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * news base type for findUnique actions
   */
  export type newsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
    /**
     * Filter, which news to fetch.
     */
    where: newsWhereUniqueInput
  }

  /**
   * news findUnique
   */
  export interface newsFindUniqueArgs extends newsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * news findUniqueOrThrow
   */
  export type newsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
    /**
     * Filter, which news to fetch.
     */
    where: newsWhereUniqueInput
  }


  /**
   * news base type for findFirst actions
   */
  export type newsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
    /**
     * Filter, which news to fetch.
     */
    where?: newsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of news to fetch.
     */
    orderBy?: Enumerable<newsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for news.
     */
    cursor?: newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` news from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` news.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of news.
     */
    distinct?: Enumerable<NewsScalarFieldEnum>
  }

  /**
   * news findFirst
   */
  export interface newsFindFirstArgs extends newsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * news findFirstOrThrow
   */
  export type newsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
    /**
     * Filter, which news to fetch.
     */
    where?: newsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of news to fetch.
     */
    orderBy?: Enumerable<newsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for news.
     */
    cursor?: newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` news from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` news.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of news.
     */
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * news findMany
   */
  export type newsFindManyArgs = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
    /**
     * Filter, which news to fetch.
     */
    where?: newsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of news to fetch.
     */
    orderBy?: Enumerable<newsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing news.
     */
    cursor?: newsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` news from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` news.
     */
    skip?: number
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * news create
   */
  export type newsCreateArgs = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
    /**
     * The data needed to create a news.
     */
    data: XOR<newsCreateInput, newsUncheckedCreateInput>
  }


  /**
   * news createMany
   */
  export type newsCreateManyArgs = {
    /**
     * The data used to create many news.
     */
    data: Enumerable<newsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * news update
   */
  export type newsUpdateArgs = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
    /**
     * The data needed to update a news.
     */
    data: XOR<newsUpdateInput, newsUncheckedUpdateInput>
    /**
     * Choose, which news to update.
     */
    where: newsWhereUniqueInput
  }


  /**
   * news updateMany
   */
  export type newsUpdateManyArgs = {
    /**
     * The data used to update news.
     */
    data: XOR<newsUpdateManyMutationInput, newsUncheckedUpdateManyInput>
    /**
     * Filter which news to update
     */
    where?: newsWhereInput
  }


  /**
   * news upsert
   */
  export type newsUpsertArgs = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
    /**
     * The filter to search for the news to update in case it exists.
     */
    where: newsWhereUniqueInput
    /**
     * In case the news found by the `where` argument doesn't exist, create a new news with this data.
     */
    create: XOR<newsCreateInput, newsUncheckedCreateInput>
    /**
     * In case the news was found with the provided `where` argument, update it with this data.
     */
    update: XOR<newsUpdateInput, newsUncheckedUpdateInput>
  }


  /**
   * news delete
   */
  export type newsDeleteArgs = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
    /**
     * Filter which news to delete.
     */
    where: newsWhereUniqueInput
  }


  /**
   * news deleteMany
   */
  export type newsDeleteManyArgs = {
    /**
     * Filter which news to delete
     */
    where?: newsWhereInput
  }


  /**
   * news without action
   */
  export type newsArgs = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    branchesId: number | null
    familyId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    branchesId: number | null
    familyId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    createdAt: Date | null
    firstName: string | null
    password: string | null
    phone: string | null
    role: string | null
    updatedAt: Date | null
    branchesId: number | null
    familyId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    createdAt: Date | null
    firstName: string | null
    password: string | null
    phone: string | null
    role: string | null
    updatedAt: Date | null
    branchesId: number | null
    familyId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    createdAt: number
    firstName: number
    password: number
    phone: number
    role: number
    updatedAt: number
    branchesId: number
    familyId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    branchesId?: true
    familyId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    branchesId?: true
    familyId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createdAt?: true
    firstName?: true
    password?: true
    phone?: true
    role?: true
    updatedAt?: true
    branchesId?: true
    familyId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createdAt?: true
    firstName?: true
    password?: true
    phone?: true
    role?: true
    updatedAt?: true
    branchesId?: true
    familyId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    createdAt?: true
    firstName?: true
    password?: true
    phone?: true
    role?: true
    updatedAt?: true
    branchesId?: true
    familyId?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    createdAt: Date
    firstName: string
    password: string
    phone: string
    role: string
    updatedAt: Date
    branchesId: number
    familyId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    createdAt?: boolean
    firstName?: boolean
    password?: boolean
    phone?: boolean
    role?: boolean
    updatedAt?: boolean
    branchesId?: boolean
    familyId?: boolean
    branch?: boolean | branchesArgs
    family?: boolean | familyArgs
    files?: boolean | User$filesArgs
    forms_sleep?: boolean | User$forms_sleepArgs
    news?: boolean | User$newsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    branch?: boolean | branchesArgs
    family?: boolean | familyArgs
    files?: boolean | User$filesArgs
    forms_sleep?: boolean | User$forms_sleepArgs
    news?: boolean | User$newsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'branch' ? branchesGetPayload<S['include'][P]> :
        P extends 'family' ? familyGetPayload<S['include'][P]> | null :
        P extends 'files' ? Array < filesGetPayload<S['include'][P]>>  :
        P extends 'forms_sleep' ? Array < forms_sleepGetPayload<S['include'][P]>>  :
        P extends 'news' ? Array < newsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'branch' ? branchesGetPayload<S['select'][P]> :
        P extends 'family' ? familyGetPayload<S['select'][P]> | null :
        P extends 'files' ? Array < filesGetPayload<S['select'][P]>>  :
        P extends 'forms_sleep' ? Array < forms_sleepGetPayload<S['select'][P]>>  :
        P extends 'news' ? Array < newsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    branch<T extends branchesArgs= {}>(args?: Subset<T, branchesArgs>): Prisma__branchesClient<branchesGetPayload<T> | Null>;

    family<T extends familyArgs= {}>(args?: Subset<T, familyArgs>): Prisma__familyClient<familyGetPayload<T> | Null>;

    files<T extends User$filesArgs= {}>(args?: Subset<T, User$filesArgs>): Prisma.PrismaPromise<Array<filesGetPayload<T>>| Null>;

    forms_sleep<T extends User$forms_sleepArgs= {}>(args?: Subset<T, User$forms_sleepArgs>): Prisma.PrismaPromise<Array<forms_sleepGetPayload<T>>| Null>;

    news<T extends User$newsArgs= {}>(args?: Subset<T, User$newsArgs>): Prisma.PrismaPromise<Array<newsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.files
   */
  export type User$filesArgs = {
    /**
     * Select specific fields to fetch from the files
     */
    select?: filesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: filesInclude | null
    where?: filesWhereInput
    orderBy?: Enumerable<filesOrderByWithRelationInput>
    cursor?: filesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FilesScalarFieldEnum>
  }


  /**
   * User.forms_sleep
   */
  export type User$forms_sleepArgs = {
    /**
     * Select specific fields to fetch from the forms_sleep
     */
    select?: forms_sleepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: forms_sleepInclude | null
    where?: forms_sleepWhereInput
    orderBy?: Enumerable<forms_sleepOrderByWithRelationInput>
    cursor?: forms_sleepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Forms_sleepScalarFieldEnum>
  }


  /**
   * User.news
   */
  export type User$newsArgs = {
    /**
     * Select specific fields to fetch from the news
     */
    select?: newsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: newsInclude | null
    where?: newsWhereInput
    orderBy?: Enumerable<newsOrderByWithRelationInput>
    cursor?: newsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ActivitiesScalarFieldEnum: {
    id: 'id',
    date: 'date',
    name: 'name',
    fileDate: 'fileDate',
    filePath: 'filePath',
    assistence: 'assistence',
    branchesId: 'branchesId'
  };

  export type ActivitiesScalarFieldEnum = (typeof ActivitiesScalarFieldEnum)[keyof typeof ActivitiesScalarFieldEnum]


  export const BranchesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    branch: 'branch',
    year_in: 'year_in',
    year_out: 'year_out',
    image_path: 'image_path'
  };

  export type BranchesScalarFieldEnum = (typeof BranchesScalarFieldEnum)[keyof typeof BranchesScalarFieldEnum]


  export const ChildsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    second_name: 'second_name',
    third_name: 'third_name',
    year_birth: 'year_birth',
    absences: 'absences',
    still_in: 'still_in',
    branchesId: 'branchesId',
    familyId: 'familyId'
  };

  export type ChildsScalarFieldEnum = (typeof ChildsScalarFieldEnum)[keyof typeof ChildsScalarFieldEnum]


  export const FamilyScalarFieldEnum: {
    id: 'id',
    branchesId: 'branchesId'
  };

  export type FamilyScalarFieldEnum = (typeof FamilyScalarFieldEnum)[keyof typeof FamilyScalarFieldEnum]


  export const FilesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    text: 'text',
    max_update_date: 'max_update_date',
    file_path: 'file_path',
    branchesId: 'branchesId',
    global: 'global',
    userId: 'userId'
  };

  export type FilesScalarFieldEnum = (typeof FilesScalarFieldEnum)[keyof typeof FilesScalarFieldEnum]


  export const Forms_sleepScalarFieldEnum: {
    id: 'id',
    name: 'name',
    capsQuatitiy: 'capsQuatitiy',
    childQuatitiy: 'childQuatitiy',
    comments: 'comments',
    confirmed: 'confirmed',
    dateIn: 'dateIn',
    dateOut: 'dateOut',
    email: 'email',
    firstName: 'firstName',
    group: 'group',
    phone: 'phone',
    userId: 'userId'
  };

  export type Forms_sleepScalarFieldEnum = (typeof Forms_sleepScalarFieldEnum)[keyof typeof Forms_sleepScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NewsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    text: 'text',
    image_path: 'image_path',
    global: 'global',
    userId: 'userId'
  };

  export type NewsScalarFieldEnum = (typeof NewsScalarFieldEnum)[keyof typeof NewsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    createdAt: 'createdAt',
    firstName: 'firstName',
    password: 'password',
    phone: 'phone',
    role: 'role',
    updatedAt: 'updatedAt',
    branchesId: 'branchesId',
    familyId: 'familyId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type branchesWhereInput = {
    AND?: Enumerable<branchesWhereInput>
    OR?: Enumerable<branchesWhereInput>
    NOT?: Enumerable<branchesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    branch?: StringFilter | string
    year_in?: IntFilter | number
    year_out?: IntFilter | number
    image_path?: StringFilter | string
    User?: UserListRelationFilter
    activities?: ActivitiesListRelationFilter
    childs?: ChildsListRelationFilter
    family?: FamilyListRelationFilter
    files?: FilesListRelationFilter
  }

  export type branchesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    branch?: SortOrder
    year_in?: SortOrder
    year_out?: SortOrder
    image_path?: SortOrder
    User?: UserOrderByRelationAggregateInput
    activities?: activitiesOrderByRelationAggregateInput
    childs?: childsOrderByRelationAggregateInput
    family?: familyOrderByRelationAggregateInput
    files?: filesOrderByRelationAggregateInput
  }

  export type branchesWhereUniqueInput = {
    id?: number
    name?: string
    branch?: string
  }

  export type branchesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    branch?: SortOrder
    year_in?: SortOrder
    year_out?: SortOrder
    image_path?: SortOrder
    _count?: branchesCountOrderByAggregateInput
    _avg?: branchesAvgOrderByAggregateInput
    _max?: branchesMaxOrderByAggregateInput
    _min?: branchesMinOrderByAggregateInput
    _sum?: branchesSumOrderByAggregateInput
  }

  export type branchesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<branchesScalarWhereWithAggregatesInput>
    OR?: Enumerable<branchesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<branchesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    branch?: StringWithAggregatesFilter | string
    year_in?: IntWithAggregatesFilter | number
    year_out?: IntWithAggregatesFilter | number
    image_path?: StringWithAggregatesFilter | string
  }

  export type childsWhereInput = {
    AND?: Enumerable<childsWhereInput>
    OR?: Enumerable<childsWhereInput>
    NOT?: Enumerable<childsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    second_name?: StringFilter | string
    third_name?: StringFilter | string
    year_birth?: IntFilter | number
    absences?: IntFilter | number
    still_in?: BoolFilter | boolean
    branchesId?: IntFilter | number
    familyId?: IntFilter | number
    branch?: XOR<BranchesRelationFilter, branchesWhereInput>
    family?: XOR<FamilyRelationFilter, familyWhereInput>
  }

  export type childsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    second_name?: SortOrder
    third_name?: SortOrder
    year_birth?: SortOrder
    absences?: SortOrder
    still_in?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
    branch?: branchesOrderByWithRelationInput
    family?: familyOrderByWithRelationInput
  }

  export type childsWhereUniqueInput = {
    id?: number
  }

  export type childsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    second_name?: SortOrder
    third_name?: SortOrder
    year_birth?: SortOrder
    absences?: SortOrder
    still_in?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
    _count?: childsCountOrderByAggregateInput
    _avg?: childsAvgOrderByAggregateInput
    _max?: childsMaxOrderByAggregateInput
    _min?: childsMinOrderByAggregateInput
    _sum?: childsSumOrderByAggregateInput
  }

  export type childsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<childsScalarWhereWithAggregatesInput>
    OR?: Enumerable<childsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<childsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    second_name?: StringWithAggregatesFilter | string
    third_name?: StringWithAggregatesFilter | string
    year_birth?: IntWithAggregatesFilter | number
    absences?: IntWithAggregatesFilter | number
    still_in?: BoolWithAggregatesFilter | boolean
    branchesId?: IntWithAggregatesFilter | number
    familyId?: IntWithAggregatesFilter | number
  }

  export type familyWhereInput = {
    AND?: Enumerable<familyWhereInput>
    OR?: Enumerable<familyWhereInput>
    NOT?: Enumerable<familyWhereInput>
    id?: IntFilter | number
    branchesId?: IntFilter | number
    User?: UserListRelationFilter
    childs?: ChildsListRelationFilter
    branch?: XOR<BranchesRelationFilter, branchesWhereInput>
  }

  export type familyOrderByWithRelationInput = {
    id?: SortOrder
    branchesId?: SortOrder
    User?: UserOrderByRelationAggregateInput
    childs?: childsOrderByRelationAggregateInput
    branch?: branchesOrderByWithRelationInput
  }

  export type familyWhereUniqueInput = {
    id?: number
  }

  export type familyOrderByWithAggregationInput = {
    id?: SortOrder
    branchesId?: SortOrder
    _count?: familyCountOrderByAggregateInput
    _avg?: familyAvgOrderByAggregateInput
    _max?: familyMaxOrderByAggregateInput
    _min?: familyMinOrderByAggregateInput
    _sum?: familySumOrderByAggregateInput
  }

  export type familyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<familyScalarWhereWithAggregatesInput>
    OR?: Enumerable<familyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<familyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    branchesId?: IntWithAggregatesFilter | number
  }

  export type activitiesWhereInput = {
    AND?: Enumerable<activitiesWhereInput>
    OR?: Enumerable<activitiesWhereInput>
    NOT?: Enumerable<activitiesWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    name?: StringFilter | string
    fileDate?: DateTimeNullableFilter | Date | string | null
    filePath?: StringNullableFilter | string | null
    assistence?: JsonFilter
    branchesId?: IntFilter | number
    branch?: XOR<BranchesRelationFilter, branchesWhereInput>
  }

  export type activitiesOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    name?: SortOrder
    fileDate?: SortOrder
    filePath?: SortOrder
    assistence?: SortOrder
    branchesId?: SortOrder
    branch?: branchesOrderByWithRelationInput
  }

  export type activitiesWhereUniqueInput = {
    id?: number
  }

  export type activitiesOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    name?: SortOrder
    fileDate?: SortOrder
    filePath?: SortOrder
    assistence?: SortOrder
    branchesId?: SortOrder
    _count?: activitiesCountOrderByAggregateInput
    _avg?: activitiesAvgOrderByAggregateInput
    _max?: activitiesMaxOrderByAggregateInput
    _min?: activitiesMinOrderByAggregateInput
    _sum?: activitiesSumOrderByAggregateInput
  }

  export type activitiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<activitiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<activitiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<activitiesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    fileDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    filePath?: StringNullableWithAggregatesFilter | string | null
    assistence?: JsonWithAggregatesFilter
    branchesId?: IntWithAggregatesFilter | number
  }

  export type filesWhereInput = {
    AND?: Enumerable<filesWhereInput>
    OR?: Enumerable<filesWhereInput>
    NOT?: Enumerable<filesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    text?: StringFilter | string
    max_update_date?: DateTimeFilter | Date | string
    file_path?: StringFilter | string
    branchesId?: IntFilter | number
    global?: BoolFilter | boolean
    userId?: IntFilter | number
    branch?: XOR<BranchesRelationFilter, branchesWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type filesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    text?: SortOrder
    max_update_date?: SortOrder
    file_path?: SortOrder
    branchesId?: SortOrder
    global?: SortOrder
    userId?: SortOrder
    branch?: branchesOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
  }

  export type filesWhereUniqueInput = {
    id?: number
  }

  export type filesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    text?: SortOrder
    max_update_date?: SortOrder
    file_path?: SortOrder
    branchesId?: SortOrder
    global?: SortOrder
    userId?: SortOrder
    _count?: filesCountOrderByAggregateInput
    _avg?: filesAvgOrderByAggregateInput
    _max?: filesMaxOrderByAggregateInput
    _min?: filesMinOrderByAggregateInput
    _sum?: filesSumOrderByAggregateInput
  }

  export type filesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<filesScalarWhereWithAggregatesInput>
    OR?: Enumerable<filesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<filesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    text?: StringWithAggregatesFilter | string
    max_update_date?: DateTimeWithAggregatesFilter | Date | string
    file_path?: StringWithAggregatesFilter | string
    branchesId?: IntWithAggregatesFilter | number
    global?: BoolWithAggregatesFilter | boolean
    userId?: IntWithAggregatesFilter | number
  }

  export type forms_sleepWhereInput = {
    AND?: Enumerable<forms_sleepWhereInput>
    OR?: Enumerable<forms_sleepWhereInput>
    NOT?: Enumerable<forms_sleepWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    capsQuatitiy?: StringFilter | string
    childQuatitiy?: StringFilter | string
    comments?: StringFilter | string
    confirmed?: BoolFilter | boolean
    dateIn?: DateTimeFilter | Date | string
    dateOut?: DateTimeFilter | Date | string
    email?: StringFilter | string
    firstName?: StringFilter | string
    group?: StringFilter | string
    phone?: StringFilter | string
    userId?: IntNullableFilter | number | null
    confirmed_by?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type forms_sleepOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    capsQuatitiy?: SortOrder
    childQuatitiy?: SortOrder
    comments?: SortOrder
    confirmed?: SortOrder
    dateIn?: SortOrder
    dateOut?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    group?: SortOrder
    phone?: SortOrder
    userId?: SortOrder
    confirmed_by?: UserOrderByWithRelationInput
  }

  export type forms_sleepWhereUniqueInput = {
    id?: number
  }

  export type forms_sleepOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    capsQuatitiy?: SortOrder
    childQuatitiy?: SortOrder
    comments?: SortOrder
    confirmed?: SortOrder
    dateIn?: SortOrder
    dateOut?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    group?: SortOrder
    phone?: SortOrder
    userId?: SortOrder
    _count?: forms_sleepCountOrderByAggregateInput
    _avg?: forms_sleepAvgOrderByAggregateInput
    _max?: forms_sleepMaxOrderByAggregateInput
    _min?: forms_sleepMinOrderByAggregateInput
    _sum?: forms_sleepSumOrderByAggregateInput
  }

  export type forms_sleepScalarWhereWithAggregatesInput = {
    AND?: Enumerable<forms_sleepScalarWhereWithAggregatesInput>
    OR?: Enumerable<forms_sleepScalarWhereWithAggregatesInput>
    NOT?: Enumerable<forms_sleepScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    capsQuatitiy?: StringWithAggregatesFilter | string
    childQuatitiy?: StringWithAggregatesFilter | string
    comments?: StringWithAggregatesFilter | string
    confirmed?: BoolWithAggregatesFilter | boolean
    dateIn?: DateTimeWithAggregatesFilter | Date | string
    dateOut?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    group?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    userId?: IntNullableWithAggregatesFilter | number | null
  }

  export type newsWhereInput = {
    AND?: Enumerable<newsWhereInput>
    OR?: Enumerable<newsWhereInput>
    NOT?: Enumerable<newsWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    text?: StringFilter | string
    image_path?: StringFilter | string
    global?: BoolFilter | boolean
    userId?: IntFilter | number
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type newsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    text?: SortOrder
    image_path?: SortOrder
    global?: SortOrder
    userId?: SortOrder
    author?: UserOrderByWithRelationInput
  }

  export type newsWhereUniqueInput = {
    id?: number
  }

  export type newsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    text?: SortOrder
    image_path?: SortOrder
    global?: SortOrder
    userId?: SortOrder
    _count?: newsCountOrderByAggregateInput
    _avg?: newsAvgOrderByAggregateInput
    _max?: newsMaxOrderByAggregateInput
    _min?: newsMinOrderByAggregateInput
    _sum?: newsSumOrderByAggregateInput
  }

  export type newsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<newsScalarWhereWithAggregatesInput>
    OR?: Enumerable<newsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<newsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    text?: StringWithAggregatesFilter | string
    image_path?: StringWithAggregatesFilter | string
    global?: BoolWithAggregatesFilter | boolean
    userId?: IntWithAggregatesFilter | number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    firstName?: StringFilter | string
    password?: StringFilter | string
    phone?: StringFilter | string
    role?: StringFilter | string
    updatedAt?: DateTimeFilter | Date | string
    branchesId?: IntFilter | number
    familyId?: IntNullableFilter | number | null
    branch?: XOR<BranchesRelationFilter, branchesWhereInput>
    family?: XOR<FamilyRelationFilter, familyWhereInput> | null
    files?: FilesListRelationFilter
    forms_sleep?: Forms_sleepListRelationFilter
    news?: NewsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    firstName?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    updatedAt?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
    branch?: branchesOrderByWithRelationInput
    family?: familyOrderByWithRelationInput
    files?: filesOrderByRelationAggregateInput
    forms_sleep?: forms_sleepOrderByRelationAggregateInput
    news?: newsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    firstName?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    updatedAt?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    firstName?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    branchesId?: IntWithAggregatesFilter | number
    familyId?: IntNullableWithAggregatesFilter | number | null
  }

  export type branchesCreateInput = {
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    User?: UserCreateNestedManyWithoutBranchInput
    activities?: activitiesCreateNestedManyWithoutBranchInput
    childs?: childsCreateNestedManyWithoutBranchInput
    family?: familyCreateNestedManyWithoutBranchInput
    files?: filesCreateNestedManyWithoutBranchInput
  }

  export type branchesUncheckedCreateInput = {
    id?: number
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    User?: UserUncheckedCreateNestedManyWithoutBranchInput
    activities?: activitiesUncheckedCreateNestedManyWithoutBranchInput
    childs?: childsUncheckedCreateNestedManyWithoutBranchInput
    family?: familyUncheckedCreateNestedManyWithoutBranchInput
    files?: filesUncheckedCreateNestedManyWithoutBranchInput
  }

  export type branchesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutBranchNestedInput
    activities?: activitiesUpdateManyWithoutBranchNestedInput
    childs?: childsUpdateManyWithoutBranchNestedInput
    family?: familyUpdateManyWithoutBranchNestedInput
    files?: filesUpdateManyWithoutBranchNestedInput
  }

  export type branchesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutBranchNestedInput
    activities?: activitiesUncheckedUpdateManyWithoutBranchNestedInput
    childs?: childsUncheckedUpdateManyWithoutBranchNestedInput
    family?: familyUncheckedUpdateManyWithoutBranchNestedInput
    files?: filesUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type branchesCreateManyInput = {
    id?: number
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
  }

  export type branchesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
  }

  export type branchesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
  }

  export type childsCreateInput = {
    name: string
    second_name: string
    third_name: string
    year_birth: number
    absences: number
    still_in: boolean
    branch: branchesCreateNestedOneWithoutChildsInput
    family: familyCreateNestedOneWithoutChildsInput
  }

  export type childsUncheckedCreateInput = {
    id?: number
    name: string
    second_name: string
    third_name: string
    year_birth: number
    absences: number
    still_in: boolean
    branchesId: number
    familyId: number
  }

  export type childsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    third_name?: StringFieldUpdateOperationsInput | string
    year_birth?: IntFieldUpdateOperationsInput | number
    absences?: IntFieldUpdateOperationsInput | number
    still_in?: BoolFieldUpdateOperationsInput | boolean
    branch?: branchesUpdateOneRequiredWithoutChildsNestedInput
    family?: familyUpdateOneRequiredWithoutChildsNestedInput
  }

  export type childsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    third_name?: StringFieldUpdateOperationsInput | string
    year_birth?: IntFieldUpdateOperationsInput | number
    absences?: IntFieldUpdateOperationsInput | number
    still_in?: BoolFieldUpdateOperationsInput | boolean
    branchesId?: IntFieldUpdateOperationsInput | number
    familyId?: IntFieldUpdateOperationsInput | number
  }

  export type childsCreateManyInput = {
    id?: number
    name: string
    second_name: string
    third_name: string
    year_birth: number
    absences: number
    still_in: boolean
    branchesId: number
    familyId: number
  }

  export type childsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    third_name?: StringFieldUpdateOperationsInput | string
    year_birth?: IntFieldUpdateOperationsInput | number
    absences?: IntFieldUpdateOperationsInput | number
    still_in?: BoolFieldUpdateOperationsInput | boolean
  }

  export type childsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    third_name?: StringFieldUpdateOperationsInput | string
    year_birth?: IntFieldUpdateOperationsInput | number
    absences?: IntFieldUpdateOperationsInput | number
    still_in?: BoolFieldUpdateOperationsInput | boolean
    branchesId?: IntFieldUpdateOperationsInput | number
    familyId?: IntFieldUpdateOperationsInput | number
  }

  export type familyCreateInput = {
    User?: UserCreateNestedManyWithoutFamilyInput
    childs?: childsCreateNestedManyWithoutFamilyInput
    branch: branchesCreateNestedOneWithoutFamilyInput
  }

  export type familyUncheckedCreateInput = {
    id?: number
    branchesId: number
    User?: UserUncheckedCreateNestedManyWithoutFamilyInput
    childs?: childsUncheckedCreateNestedManyWithoutFamilyInput
  }

  export type familyUpdateInput = {
    User?: UserUpdateManyWithoutFamilyNestedInput
    childs?: childsUpdateManyWithoutFamilyNestedInput
    branch?: branchesUpdateOneRequiredWithoutFamilyNestedInput
  }

  export type familyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchesId?: IntFieldUpdateOperationsInput | number
    User?: UserUncheckedUpdateManyWithoutFamilyNestedInput
    childs?: childsUncheckedUpdateManyWithoutFamilyNestedInput
  }

  export type familyCreateManyInput = {
    id?: number
    branchesId: number
  }

  export type familyUpdateManyMutationInput = {

  }

  export type familyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchesId?: IntFieldUpdateOperationsInput | number
  }

  export type activitiesCreateInput = {
    date: Date | string
    name: string
    fileDate?: Date | string | null
    filePath?: string | null
    assistence: JsonNullValueInput | InputJsonValue
    branch: branchesCreateNestedOneWithoutActivitiesInput
  }

  export type activitiesUncheckedCreateInput = {
    id?: number
    date: Date | string
    name: string
    fileDate?: Date | string | null
    filePath?: string | null
    assistence: JsonNullValueInput | InputJsonValue
    branchesId: number
  }

  export type activitiesUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fileDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    assistence?: JsonNullValueInput | InputJsonValue
    branch?: branchesUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type activitiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fileDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    assistence?: JsonNullValueInput | InputJsonValue
    branchesId?: IntFieldUpdateOperationsInput | number
  }

  export type activitiesCreateManyInput = {
    id?: number
    date: Date | string
    name: string
    fileDate?: Date | string | null
    filePath?: string | null
    assistence: JsonNullValueInput | InputJsonValue
    branchesId: number
  }

  export type activitiesUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fileDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    assistence?: JsonNullValueInput | InputJsonValue
  }

  export type activitiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fileDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    assistence?: JsonNullValueInput | InputJsonValue
    branchesId?: IntFieldUpdateOperationsInput | number
  }

  export type filesCreateInput = {
    name: string
    text: string
    max_update_date: Date | string
    file_path: string
    global: boolean
    branch: branchesCreateNestedOneWithoutFilesInput
    author: UserCreateNestedOneWithoutFilesInput
  }

  export type filesUncheckedCreateInput = {
    id?: number
    name: string
    text: string
    max_update_date: Date | string
    file_path: string
    branchesId: number
    global: boolean
    userId: number
  }

  export type filesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    max_update_date?: DateTimeFieldUpdateOperationsInput | Date | string
    file_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
    branch?: branchesUpdateOneRequiredWithoutFilesNestedInput
    author?: UserUpdateOneRequiredWithoutFilesNestedInput
  }

  export type filesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    max_update_date?: DateTimeFieldUpdateOperationsInput | Date | string
    file_path?: StringFieldUpdateOperationsInput | string
    branchesId?: IntFieldUpdateOperationsInput | number
    global?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type filesCreateManyInput = {
    id?: number
    name: string
    text: string
    max_update_date: Date | string
    file_path: string
    branchesId: number
    global: boolean
    userId: number
  }

  export type filesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    max_update_date?: DateTimeFieldUpdateOperationsInput | Date | string
    file_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
  }

  export type filesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    max_update_date?: DateTimeFieldUpdateOperationsInput | Date | string
    file_path?: StringFieldUpdateOperationsInput | string
    branchesId?: IntFieldUpdateOperationsInput | number
    global?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type forms_sleepCreateInput = {
    name: string
    capsQuatitiy: string
    childQuatitiy: string
    comments: string
    confirmed: boolean
    dateIn: Date | string
    dateOut: Date | string
    email: string
    firstName: string
    group: string
    phone: string
    confirmed_by?: UserCreateNestedOneWithoutForms_sleepInput
  }

  export type forms_sleepUncheckedCreateInput = {
    id?: number
    name: string
    capsQuatitiy: string
    childQuatitiy: string
    comments: string
    confirmed: boolean
    dateIn: Date | string
    dateOut: Date | string
    email: string
    firstName: string
    group: string
    phone: string
    userId?: number | null
  }

  export type forms_sleepUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    capsQuatitiy?: StringFieldUpdateOperationsInput | string
    childQuatitiy?: StringFieldUpdateOperationsInput | string
    comments?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    dateIn?: DateTimeFieldUpdateOperationsInput | Date | string
    dateOut?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    confirmed_by?: UserUpdateOneWithoutForms_sleepNestedInput
  }

  export type forms_sleepUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capsQuatitiy?: StringFieldUpdateOperationsInput | string
    childQuatitiy?: StringFieldUpdateOperationsInput | string
    comments?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    dateIn?: DateTimeFieldUpdateOperationsInput | Date | string
    dateOut?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type forms_sleepCreateManyInput = {
    id?: number
    name: string
    capsQuatitiy: string
    childQuatitiy: string
    comments: string
    confirmed: boolean
    dateIn: Date | string
    dateOut: Date | string
    email: string
    firstName: string
    group: string
    phone: string
    userId?: number | null
  }

  export type forms_sleepUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    capsQuatitiy?: StringFieldUpdateOperationsInput | string
    childQuatitiy?: StringFieldUpdateOperationsInput | string
    comments?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    dateIn?: DateTimeFieldUpdateOperationsInput | Date | string
    dateOut?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type forms_sleepUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capsQuatitiy?: StringFieldUpdateOperationsInput | string
    childQuatitiy?: StringFieldUpdateOperationsInput | string
    comments?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    dateIn?: DateTimeFieldUpdateOperationsInput | Date | string
    dateOut?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type newsCreateInput = {
    title: string
    text: string
    image_path: string
    global: boolean
    author: UserCreateNestedOneWithoutNewsInput
  }

  export type newsUncheckedCreateInput = {
    id?: number
    title: string
    text: string
    image_path: string
    global: boolean
    userId: number
  }

  export type newsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    image_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutNewsNestedInput
  }

  export type newsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    image_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type newsCreateManyInput = {
    id?: number
    title: string
    text: string
    image_path: string
    global: boolean
    userId: number
  }

  export type newsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    image_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
  }

  export type newsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    image_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branch: branchesCreateNestedOneWithoutUserInput
    family?: familyCreateNestedOneWithoutUserInput
    files?: filesCreateNestedManyWithoutAuthorInput
    forms_sleep?: forms_sleepCreateNestedManyWithoutConfirmed_byInput
    news?: newsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branchesId: number
    familyId?: number | null
    files?: filesUncheckedCreateNestedManyWithoutAuthorInput
    forms_sleep?: forms_sleepUncheckedCreateNestedManyWithoutConfirmed_byInput
    news?: newsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: branchesUpdateOneRequiredWithoutUserNestedInput
    family?: familyUpdateOneWithoutUserNestedInput
    files?: filesUpdateManyWithoutAuthorNestedInput
    forms_sleep?: forms_sleepUpdateManyWithoutConfirmed_byNestedInput
    news?: newsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branchesId?: IntFieldUpdateOperationsInput | number
    familyId?: NullableIntFieldUpdateOperationsInput | number | null
    files?: filesUncheckedUpdateManyWithoutAuthorNestedInput
    forms_sleep?: forms_sleepUncheckedUpdateManyWithoutConfirmed_byNestedInput
    news?: newsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branchesId: number
    familyId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branchesId?: IntFieldUpdateOperationsInput | number
    familyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ActivitiesListRelationFilter = {
    every?: activitiesWhereInput
    some?: activitiesWhereInput
    none?: activitiesWhereInput
  }

  export type ChildsListRelationFilter = {
    every?: childsWhereInput
    some?: childsWhereInput
    none?: childsWhereInput
  }

  export type FamilyListRelationFilter = {
    every?: familyWhereInput
    some?: familyWhereInput
    none?: familyWhereInput
  }

  export type FilesListRelationFilter = {
    every?: filesWhereInput
    some?: filesWhereInput
    none?: filesWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type activitiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type childsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type familyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type filesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type branchesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    branch?: SortOrder
    year_in?: SortOrder
    year_out?: SortOrder
    image_path?: SortOrder
  }

  export type branchesAvgOrderByAggregateInput = {
    id?: SortOrder
    year_in?: SortOrder
    year_out?: SortOrder
  }

  export type branchesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    branch?: SortOrder
    year_in?: SortOrder
    year_out?: SortOrder
    image_path?: SortOrder
  }

  export type branchesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    branch?: SortOrder
    year_in?: SortOrder
    year_out?: SortOrder
    image_path?: SortOrder
  }

  export type branchesSumOrderByAggregateInput = {
    id?: SortOrder
    year_in?: SortOrder
    year_out?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type BranchesRelationFilter = {
    is?: branchesWhereInput
    isNot?: branchesWhereInput
  }

  export type FamilyRelationFilter = {
    is?: familyWhereInput
    isNot?: familyWhereInput
  }

  export type childsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    second_name?: SortOrder
    third_name?: SortOrder
    year_birth?: SortOrder
    absences?: SortOrder
    still_in?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
  }

  export type childsAvgOrderByAggregateInput = {
    id?: SortOrder
    year_birth?: SortOrder
    absences?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
  }

  export type childsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    second_name?: SortOrder
    third_name?: SortOrder
    year_birth?: SortOrder
    absences?: SortOrder
    still_in?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
  }

  export type childsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    second_name?: SortOrder
    third_name?: SortOrder
    year_birth?: SortOrder
    absences?: SortOrder
    still_in?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
  }

  export type childsSumOrderByAggregateInput = {
    id?: SortOrder
    year_birth?: SortOrder
    absences?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type familyCountOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
  }

  export type familyAvgOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
  }

  export type familyMaxOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
  }

  export type familyMinOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
  }

  export type familySumOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type activitiesCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    name?: SortOrder
    fileDate?: SortOrder
    filePath?: SortOrder
    assistence?: SortOrder
    branchesId?: SortOrder
  }

  export type activitiesAvgOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
  }

  export type activitiesMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    name?: SortOrder
    fileDate?: SortOrder
    filePath?: SortOrder
    branchesId?: SortOrder
  }

  export type activitiesMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    name?: SortOrder
    fileDate?: SortOrder
    filePath?: SortOrder
    branchesId?: SortOrder
  }

  export type activitiesSumOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type filesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    text?: SortOrder
    max_update_date?: SortOrder
    file_path?: SortOrder
    branchesId?: SortOrder
    global?: SortOrder
    userId?: SortOrder
  }

  export type filesAvgOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
    userId?: SortOrder
  }

  export type filesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    text?: SortOrder
    max_update_date?: SortOrder
    file_path?: SortOrder
    branchesId?: SortOrder
    global?: SortOrder
    userId?: SortOrder
  }

  export type filesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    text?: SortOrder
    max_update_date?: SortOrder
    file_path?: SortOrder
    branchesId?: SortOrder
    global?: SortOrder
    userId?: SortOrder
  }

  export type filesSumOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type forms_sleepCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    capsQuatitiy?: SortOrder
    childQuatitiy?: SortOrder
    comments?: SortOrder
    confirmed?: SortOrder
    dateIn?: SortOrder
    dateOut?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    group?: SortOrder
    phone?: SortOrder
    userId?: SortOrder
  }

  export type forms_sleepAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type forms_sleepMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    capsQuatitiy?: SortOrder
    childQuatitiy?: SortOrder
    comments?: SortOrder
    confirmed?: SortOrder
    dateIn?: SortOrder
    dateOut?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    group?: SortOrder
    phone?: SortOrder
    userId?: SortOrder
  }

  export type forms_sleepMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    capsQuatitiy?: SortOrder
    childQuatitiy?: SortOrder
    comments?: SortOrder
    confirmed?: SortOrder
    dateIn?: SortOrder
    dateOut?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    group?: SortOrder
    phone?: SortOrder
    userId?: SortOrder
  }

  export type forms_sleepSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type newsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    text?: SortOrder
    image_path?: SortOrder
    global?: SortOrder
    userId?: SortOrder
  }

  export type newsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type newsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    text?: SortOrder
    image_path?: SortOrder
    global?: SortOrder
    userId?: SortOrder
  }

  export type newsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    text?: SortOrder
    image_path?: SortOrder
    global?: SortOrder
    userId?: SortOrder
  }

  export type newsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type Forms_sleepListRelationFilter = {
    every?: forms_sleepWhereInput
    some?: forms_sleepWhereInput
    none?: forms_sleepWhereInput
  }

  export type NewsListRelationFilter = {
    every?: newsWhereInput
    some?: newsWhereInput
    none?: newsWhereInput
  }

  export type forms_sleepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type newsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    firstName?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    updatedAt?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    firstName?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    updatedAt?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    firstName?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    updatedAt?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    branchesId?: SortOrder
    familyId?: SortOrder
  }

  export type UserCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<UserCreateWithoutBranchInput>, Enumerable<UserUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutBranchInput>
    createMany?: UserCreateManyBranchInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type activitiesCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<activitiesCreateWithoutBranchInput>, Enumerable<activitiesUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<activitiesCreateOrConnectWithoutBranchInput>
    createMany?: activitiesCreateManyBranchInputEnvelope
    connect?: Enumerable<activitiesWhereUniqueInput>
  }

  export type childsCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<childsCreateWithoutBranchInput>, Enumerable<childsUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<childsCreateOrConnectWithoutBranchInput>
    createMany?: childsCreateManyBranchInputEnvelope
    connect?: Enumerable<childsWhereUniqueInput>
  }

  export type familyCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<familyCreateWithoutBranchInput>, Enumerable<familyUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<familyCreateOrConnectWithoutBranchInput>
    createMany?: familyCreateManyBranchInputEnvelope
    connect?: Enumerable<familyWhereUniqueInput>
  }

  export type filesCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<filesCreateWithoutBranchInput>, Enumerable<filesUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<filesCreateOrConnectWithoutBranchInput>
    createMany?: filesCreateManyBranchInputEnvelope
    connect?: Enumerable<filesWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<UserCreateWithoutBranchInput>, Enumerable<UserUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutBranchInput>
    createMany?: UserCreateManyBranchInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type activitiesUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<activitiesCreateWithoutBranchInput>, Enumerable<activitiesUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<activitiesCreateOrConnectWithoutBranchInput>
    createMany?: activitiesCreateManyBranchInputEnvelope
    connect?: Enumerable<activitiesWhereUniqueInput>
  }

  export type childsUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<childsCreateWithoutBranchInput>, Enumerable<childsUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<childsCreateOrConnectWithoutBranchInput>
    createMany?: childsCreateManyBranchInputEnvelope
    connect?: Enumerable<childsWhereUniqueInput>
  }

  export type familyUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<familyCreateWithoutBranchInput>, Enumerable<familyUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<familyCreateOrConnectWithoutBranchInput>
    createMany?: familyCreateManyBranchInputEnvelope
    connect?: Enumerable<familyWhereUniqueInput>
  }

  export type filesUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<filesCreateWithoutBranchInput>, Enumerable<filesUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<filesCreateOrConnectWithoutBranchInput>
    createMany?: filesCreateManyBranchInputEnvelope
    connect?: Enumerable<filesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutBranchInput>, Enumerable<UserUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: UserCreateManyBranchInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type activitiesUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<activitiesCreateWithoutBranchInput>, Enumerable<activitiesUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<activitiesCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<activitiesUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: activitiesCreateManyBranchInputEnvelope
    set?: Enumerable<activitiesWhereUniqueInput>
    disconnect?: Enumerable<activitiesWhereUniqueInput>
    delete?: Enumerable<activitiesWhereUniqueInput>
    connect?: Enumerable<activitiesWhereUniqueInput>
    update?: Enumerable<activitiesUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<activitiesUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<activitiesScalarWhereInput>
  }

  export type childsUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<childsCreateWithoutBranchInput>, Enumerable<childsUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<childsCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<childsUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: childsCreateManyBranchInputEnvelope
    set?: Enumerable<childsWhereUniqueInput>
    disconnect?: Enumerable<childsWhereUniqueInput>
    delete?: Enumerable<childsWhereUniqueInput>
    connect?: Enumerable<childsWhereUniqueInput>
    update?: Enumerable<childsUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<childsUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<childsScalarWhereInput>
  }

  export type familyUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<familyCreateWithoutBranchInput>, Enumerable<familyUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<familyCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<familyUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: familyCreateManyBranchInputEnvelope
    set?: Enumerable<familyWhereUniqueInput>
    disconnect?: Enumerable<familyWhereUniqueInput>
    delete?: Enumerable<familyWhereUniqueInput>
    connect?: Enumerable<familyWhereUniqueInput>
    update?: Enumerable<familyUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<familyUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<familyScalarWhereInput>
  }

  export type filesUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<filesCreateWithoutBranchInput>, Enumerable<filesUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<filesCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<filesUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: filesCreateManyBranchInputEnvelope
    set?: Enumerable<filesWhereUniqueInput>
    disconnect?: Enumerable<filesWhereUniqueInput>
    delete?: Enumerable<filesWhereUniqueInput>
    connect?: Enumerable<filesWhereUniqueInput>
    update?: Enumerable<filesUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<filesUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<filesScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutBranchInput>, Enumerable<UserUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: UserCreateManyBranchInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type activitiesUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<activitiesCreateWithoutBranchInput>, Enumerable<activitiesUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<activitiesCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<activitiesUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: activitiesCreateManyBranchInputEnvelope
    set?: Enumerable<activitiesWhereUniqueInput>
    disconnect?: Enumerable<activitiesWhereUniqueInput>
    delete?: Enumerable<activitiesWhereUniqueInput>
    connect?: Enumerable<activitiesWhereUniqueInput>
    update?: Enumerable<activitiesUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<activitiesUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<activitiesScalarWhereInput>
  }

  export type childsUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<childsCreateWithoutBranchInput>, Enumerable<childsUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<childsCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<childsUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: childsCreateManyBranchInputEnvelope
    set?: Enumerable<childsWhereUniqueInput>
    disconnect?: Enumerable<childsWhereUniqueInput>
    delete?: Enumerable<childsWhereUniqueInput>
    connect?: Enumerable<childsWhereUniqueInput>
    update?: Enumerable<childsUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<childsUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<childsScalarWhereInput>
  }

  export type familyUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<familyCreateWithoutBranchInput>, Enumerable<familyUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<familyCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<familyUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: familyCreateManyBranchInputEnvelope
    set?: Enumerable<familyWhereUniqueInput>
    disconnect?: Enumerable<familyWhereUniqueInput>
    delete?: Enumerable<familyWhereUniqueInput>
    connect?: Enumerable<familyWhereUniqueInput>
    update?: Enumerable<familyUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<familyUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<familyScalarWhereInput>
  }

  export type filesUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<filesCreateWithoutBranchInput>, Enumerable<filesUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<filesCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<filesUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: filesCreateManyBranchInputEnvelope
    set?: Enumerable<filesWhereUniqueInput>
    disconnect?: Enumerable<filesWhereUniqueInput>
    delete?: Enumerable<filesWhereUniqueInput>
    connect?: Enumerable<filesWhereUniqueInput>
    update?: Enumerable<filesUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<filesUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<filesScalarWhereInput>
  }

  export type branchesCreateNestedOneWithoutChildsInput = {
    create?: XOR<branchesCreateWithoutChildsInput, branchesUncheckedCreateWithoutChildsInput>
    connectOrCreate?: branchesCreateOrConnectWithoutChildsInput
    connect?: branchesWhereUniqueInput
  }

  export type familyCreateNestedOneWithoutChildsInput = {
    create?: XOR<familyCreateWithoutChildsInput, familyUncheckedCreateWithoutChildsInput>
    connectOrCreate?: familyCreateOrConnectWithoutChildsInput
    connect?: familyWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type branchesUpdateOneRequiredWithoutChildsNestedInput = {
    create?: XOR<branchesCreateWithoutChildsInput, branchesUncheckedCreateWithoutChildsInput>
    connectOrCreate?: branchesCreateOrConnectWithoutChildsInput
    upsert?: branchesUpsertWithoutChildsInput
    connect?: branchesWhereUniqueInput
    update?: XOR<branchesUpdateWithoutChildsInput, branchesUncheckedUpdateWithoutChildsInput>
  }

  export type familyUpdateOneRequiredWithoutChildsNestedInput = {
    create?: XOR<familyCreateWithoutChildsInput, familyUncheckedCreateWithoutChildsInput>
    connectOrCreate?: familyCreateOrConnectWithoutChildsInput
    upsert?: familyUpsertWithoutChildsInput
    connect?: familyWhereUniqueInput
    update?: XOR<familyUpdateWithoutChildsInput, familyUncheckedUpdateWithoutChildsInput>
  }

  export type UserCreateNestedManyWithoutFamilyInput = {
    create?: XOR<Enumerable<UserCreateWithoutFamilyInput>, Enumerable<UserUncheckedCreateWithoutFamilyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutFamilyInput>
    createMany?: UserCreateManyFamilyInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type childsCreateNestedManyWithoutFamilyInput = {
    create?: XOR<Enumerable<childsCreateWithoutFamilyInput>, Enumerable<childsUncheckedCreateWithoutFamilyInput>>
    connectOrCreate?: Enumerable<childsCreateOrConnectWithoutFamilyInput>
    createMany?: childsCreateManyFamilyInputEnvelope
    connect?: Enumerable<childsWhereUniqueInput>
  }

  export type branchesCreateNestedOneWithoutFamilyInput = {
    create?: XOR<branchesCreateWithoutFamilyInput, branchesUncheckedCreateWithoutFamilyInput>
    connectOrCreate?: branchesCreateOrConnectWithoutFamilyInput
    connect?: branchesWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutFamilyInput = {
    create?: XOR<Enumerable<UserCreateWithoutFamilyInput>, Enumerable<UserUncheckedCreateWithoutFamilyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutFamilyInput>
    createMany?: UserCreateManyFamilyInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type childsUncheckedCreateNestedManyWithoutFamilyInput = {
    create?: XOR<Enumerable<childsCreateWithoutFamilyInput>, Enumerable<childsUncheckedCreateWithoutFamilyInput>>
    connectOrCreate?: Enumerable<childsCreateOrConnectWithoutFamilyInput>
    createMany?: childsCreateManyFamilyInputEnvelope
    connect?: Enumerable<childsWhereUniqueInput>
  }

  export type UserUpdateManyWithoutFamilyNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutFamilyInput>, Enumerable<UserUncheckedCreateWithoutFamilyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutFamilyInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutFamilyInput>
    createMany?: UserCreateManyFamilyInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutFamilyInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutFamilyInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type childsUpdateManyWithoutFamilyNestedInput = {
    create?: XOR<Enumerable<childsCreateWithoutFamilyInput>, Enumerable<childsUncheckedCreateWithoutFamilyInput>>
    connectOrCreate?: Enumerable<childsCreateOrConnectWithoutFamilyInput>
    upsert?: Enumerable<childsUpsertWithWhereUniqueWithoutFamilyInput>
    createMany?: childsCreateManyFamilyInputEnvelope
    set?: Enumerable<childsWhereUniqueInput>
    disconnect?: Enumerable<childsWhereUniqueInput>
    delete?: Enumerable<childsWhereUniqueInput>
    connect?: Enumerable<childsWhereUniqueInput>
    update?: Enumerable<childsUpdateWithWhereUniqueWithoutFamilyInput>
    updateMany?: Enumerable<childsUpdateManyWithWhereWithoutFamilyInput>
    deleteMany?: Enumerable<childsScalarWhereInput>
  }

  export type branchesUpdateOneRequiredWithoutFamilyNestedInput = {
    create?: XOR<branchesCreateWithoutFamilyInput, branchesUncheckedCreateWithoutFamilyInput>
    connectOrCreate?: branchesCreateOrConnectWithoutFamilyInput
    upsert?: branchesUpsertWithoutFamilyInput
    connect?: branchesWhereUniqueInput
    update?: XOR<branchesUpdateWithoutFamilyInput, branchesUncheckedUpdateWithoutFamilyInput>
  }

  export type UserUncheckedUpdateManyWithoutFamilyNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutFamilyInput>, Enumerable<UserUncheckedCreateWithoutFamilyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutFamilyInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutFamilyInput>
    createMany?: UserCreateManyFamilyInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutFamilyInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutFamilyInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type childsUncheckedUpdateManyWithoutFamilyNestedInput = {
    create?: XOR<Enumerable<childsCreateWithoutFamilyInput>, Enumerable<childsUncheckedCreateWithoutFamilyInput>>
    connectOrCreate?: Enumerable<childsCreateOrConnectWithoutFamilyInput>
    upsert?: Enumerable<childsUpsertWithWhereUniqueWithoutFamilyInput>
    createMany?: childsCreateManyFamilyInputEnvelope
    set?: Enumerable<childsWhereUniqueInput>
    disconnect?: Enumerable<childsWhereUniqueInput>
    delete?: Enumerable<childsWhereUniqueInput>
    connect?: Enumerable<childsWhereUniqueInput>
    update?: Enumerable<childsUpdateWithWhereUniqueWithoutFamilyInput>
    updateMany?: Enumerable<childsUpdateManyWithWhereWithoutFamilyInput>
    deleteMany?: Enumerable<childsScalarWhereInput>
  }

  export type branchesCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<branchesCreateWithoutActivitiesInput, branchesUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: branchesCreateOrConnectWithoutActivitiesInput
    connect?: branchesWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type branchesUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<branchesCreateWithoutActivitiesInput, branchesUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: branchesCreateOrConnectWithoutActivitiesInput
    upsert?: branchesUpsertWithoutActivitiesInput
    connect?: branchesWhereUniqueInput
    update?: XOR<branchesUpdateWithoutActivitiesInput, branchesUncheckedUpdateWithoutActivitiesInput>
  }

  export type branchesCreateNestedOneWithoutFilesInput = {
    create?: XOR<branchesCreateWithoutFilesInput, branchesUncheckedCreateWithoutFilesInput>
    connectOrCreate?: branchesCreateOrConnectWithoutFilesInput
    connect?: branchesWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFilesInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    connect?: UserWhereUniqueInput
  }

  export type branchesUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<branchesCreateWithoutFilesInput, branchesUncheckedCreateWithoutFilesInput>
    connectOrCreate?: branchesCreateOrConnectWithoutFilesInput
    upsert?: branchesUpsertWithoutFilesInput
    connect?: branchesWhereUniqueInput
    update?: XOR<branchesUpdateWithoutFilesInput, branchesUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    upsert?: UserUpsertWithoutFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
  }

  export type UserCreateNestedOneWithoutForms_sleepInput = {
    create?: XOR<UserCreateWithoutForms_sleepInput, UserUncheckedCreateWithoutForms_sleepInput>
    connectOrCreate?: UserCreateOrConnectWithoutForms_sleepInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutForms_sleepNestedInput = {
    create?: XOR<UserCreateWithoutForms_sleepInput, UserUncheckedCreateWithoutForms_sleepInput>
    connectOrCreate?: UserCreateOrConnectWithoutForms_sleepInput
    upsert?: UserUpsertWithoutForms_sleepInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutForms_sleepInput, UserUncheckedUpdateWithoutForms_sleepInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutNewsInput = {
    create?: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNewsNestedInput = {
    create?: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewsInput
    upsert?: UserUpsertWithoutNewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutNewsInput, UserUncheckedUpdateWithoutNewsInput>
  }

  export type branchesCreateNestedOneWithoutUserInput = {
    create?: XOR<branchesCreateWithoutUserInput, branchesUncheckedCreateWithoutUserInput>
    connectOrCreate?: branchesCreateOrConnectWithoutUserInput
    connect?: branchesWhereUniqueInput
  }

  export type familyCreateNestedOneWithoutUserInput = {
    create?: XOR<familyCreateWithoutUserInput, familyUncheckedCreateWithoutUserInput>
    connectOrCreate?: familyCreateOrConnectWithoutUserInput
    connect?: familyWhereUniqueInput
  }

  export type filesCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<filesCreateWithoutAuthorInput>, Enumerable<filesUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<filesCreateOrConnectWithoutAuthorInput>
    createMany?: filesCreateManyAuthorInputEnvelope
    connect?: Enumerable<filesWhereUniqueInput>
  }

  export type forms_sleepCreateNestedManyWithoutConfirmed_byInput = {
    create?: XOR<Enumerable<forms_sleepCreateWithoutConfirmed_byInput>, Enumerable<forms_sleepUncheckedCreateWithoutConfirmed_byInput>>
    connectOrCreate?: Enumerable<forms_sleepCreateOrConnectWithoutConfirmed_byInput>
    createMany?: forms_sleepCreateManyConfirmed_byInputEnvelope
    connect?: Enumerable<forms_sleepWhereUniqueInput>
  }

  export type newsCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<newsCreateWithoutAuthorInput>, Enumerable<newsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<newsCreateOrConnectWithoutAuthorInput>
    createMany?: newsCreateManyAuthorInputEnvelope
    connect?: Enumerable<newsWhereUniqueInput>
  }

  export type filesUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<filesCreateWithoutAuthorInput>, Enumerable<filesUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<filesCreateOrConnectWithoutAuthorInput>
    createMany?: filesCreateManyAuthorInputEnvelope
    connect?: Enumerable<filesWhereUniqueInput>
  }

  export type forms_sleepUncheckedCreateNestedManyWithoutConfirmed_byInput = {
    create?: XOR<Enumerable<forms_sleepCreateWithoutConfirmed_byInput>, Enumerable<forms_sleepUncheckedCreateWithoutConfirmed_byInput>>
    connectOrCreate?: Enumerable<forms_sleepCreateOrConnectWithoutConfirmed_byInput>
    createMany?: forms_sleepCreateManyConfirmed_byInputEnvelope
    connect?: Enumerable<forms_sleepWhereUniqueInput>
  }

  export type newsUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<newsCreateWithoutAuthorInput>, Enumerable<newsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<newsCreateOrConnectWithoutAuthorInput>
    createMany?: newsCreateManyAuthorInputEnvelope
    connect?: Enumerable<newsWhereUniqueInput>
  }

  export type branchesUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<branchesCreateWithoutUserInput, branchesUncheckedCreateWithoutUserInput>
    connectOrCreate?: branchesCreateOrConnectWithoutUserInput
    upsert?: branchesUpsertWithoutUserInput
    connect?: branchesWhereUniqueInput
    update?: XOR<branchesUpdateWithoutUserInput, branchesUncheckedUpdateWithoutUserInput>
  }

  export type familyUpdateOneWithoutUserNestedInput = {
    create?: XOR<familyCreateWithoutUserInput, familyUncheckedCreateWithoutUserInput>
    connectOrCreate?: familyCreateOrConnectWithoutUserInput
    upsert?: familyUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: familyWhereUniqueInput
    update?: XOR<familyUpdateWithoutUserInput, familyUncheckedUpdateWithoutUserInput>
  }

  export type filesUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<filesCreateWithoutAuthorInput>, Enumerable<filesUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<filesCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<filesUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: filesCreateManyAuthorInputEnvelope
    set?: Enumerable<filesWhereUniqueInput>
    disconnect?: Enumerable<filesWhereUniqueInput>
    delete?: Enumerable<filesWhereUniqueInput>
    connect?: Enumerable<filesWhereUniqueInput>
    update?: Enumerable<filesUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<filesUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<filesScalarWhereInput>
  }

  export type forms_sleepUpdateManyWithoutConfirmed_byNestedInput = {
    create?: XOR<Enumerable<forms_sleepCreateWithoutConfirmed_byInput>, Enumerable<forms_sleepUncheckedCreateWithoutConfirmed_byInput>>
    connectOrCreate?: Enumerable<forms_sleepCreateOrConnectWithoutConfirmed_byInput>
    upsert?: Enumerable<forms_sleepUpsertWithWhereUniqueWithoutConfirmed_byInput>
    createMany?: forms_sleepCreateManyConfirmed_byInputEnvelope
    set?: Enumerable<forms_sleepWhereUniqueInput>
    disconnect?: Enumerable<forms_sleepWhereUniqueInput>
    delete?: Enumerable<forms_sleepWhereUniqueInput>
    connect?: Enumerable<forms_sleepWhereUniqueInput>
    update?: Enumerable<forms_sleepUpdateWithWhereUniqueWithoutConfirmed_byInput>
    updateMany?: Enumerable<forms_sleepUpdateManyWithWhereWithoutConfirmed_byInput>
    deleteMany?: Enumerable<forms_sleepScalarWhereInput>
  }

  export type newsUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<newsCreateWithoutAuthorInput>, Enumerable<newsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<newsCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<newsUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: newsCreateManyAuthorInputEnvelope
    set?: Enumerable<newsWhereUniqueInput>
    disconnect?: Enumerable<newsWhereUniqueInput>
    delete?: Enumerable<newsWhereUniqueInput>
    connect?: Enumerable<newsWhereUniqueInput>
    update?: Enumerable<newsUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<newsUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<newsScalarWhereInput>
  }

  export type filesUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<filesCreateWithoutAuthorInput>, Enumerable<filesUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<filesCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<filesUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: filesCreateManyAuthorInputEnvelope
    set?: Enumerable<filesWhereUniqueInput>
    disconnect?: Enumerable<filesWhereUniqueInput>
    delete?: Enumerable<filesWhereUniqueInput>
    connect?: Enumerable<filesWhereUniqueInput>
    update?: Enumerable<filesUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<filesUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<filesScalarWhereInput>
  }

  export type forms_sleepUncheckedUpdateManyWithoutConfirmed_byNestedInput = {
    create?: XOR<Enumerable<forms_sleepCreateWithoutConfirmed_byInput>, Enumerable<forms_sleepUncheckedCreateWithoutConfirmed_byInput>>
    connectOrCreate?: Enumerable<forms_sleepCreateOrConnectWithoutConfirmed_byInput>
    upsert?: Enumerable<forms_sleepUpsertWithWhereUniqueWithoutConfirmed_byInput>
    createMany?: forms_sleepCreateManyConfirmed_byInputEnvelope
    set?: Enumerable<forms_sleepWhereUniqueInput>
    disconnect?: Enumerable<forms_sleepWhereUniqueInput>
    delete?: Enumerable<forms_sleepWhereUniqueInput>
    connect?: Enumerable<forms_sleepWhereUniqueInput>
    update?: Enumerable<forms_sleepUpdateWithWhereUniqueWithoutConfirmed_byInput>
    updateMany?: Enumerable<forms_sleepUpdateManyWithWhereWithoutConfirmed_byInput>
    deleteMany?: Enumerable<forms_sleepScalarWhereInput>
  }

  export type newsUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<newsCreateWithoutAuthorInput>, Enumerable<newsUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<newsCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<newsUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: newsCreateManyAuthorInputEnvelope
    set?: Enumerable<newsWhereUniqueInput>
    disconnect?: Enumerable<newsWhereUniqueInput>
    delete?: Enumerable<newsWhereUniqueInput>
    connect?: Enumerable<newsWhereUniqueInput>
    update?: Enumerable<newsUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<newsUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<newsScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type UserCreateWithoutBranchInput = {
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    family?: familyCreateNestedOneWithoutUserInput
    files?: filesCreateNestedManyWithoutAuthorInput
    forms_sleep?: forms_sleepCreateNestedManyWithoutConfirmed_byInput
    news?: newsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutBranchInput = {
    id?: number
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    familyId?: number | null
    files?: filesUncheckedCreateNestedManyWithoutAuthorInput
    forms_sleep?: forms_sleepUncheckedCreateNestedManyWithoutConfirmed_byInput
    news?: newsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutBranchInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput>
  }

  export type UserCreateManyBranchInputEnvelope = {
    data: Enumerable<UserCreateManyBranchInput>
    skipDuplicates?: boolean
  }

  export type activitiesCreateWithoutBranchInput = {
    date: Date | string
    name: string
    fileDate?: Date | string | null
    filePath?: string | null
    assistence: JsonNullValueInput | InputJsonValue
  }

  export type activitiesUncheckedCreateWithoutBranchInput = {
    id?: number
    date: Date | string
    name: string
    fileDate?: Date | string | null
    filePath?: string | null
    assistence: JsonNullValueInput | InputJsonValue
  }

  export type activitiesCreateOrConnectWithoutBranchInput = {
    where: activitiesWhereUniqueInput
    create: XOR<activitiesCreateWithoutBranchInput, activitiesUncheckedCreateWithoutBranchInput>
  }

  export type activitiesCreateManyBranchInputEnvelope = {
    data: Enumerable<activitiesCreateManyBranchInput>
    skipDuplicates?: boolean
  }

  export type childsCreateWithoutBranchInput = {
    name: string
    second_name: string
    third_name: string
    year_birth: number
    absences: number
    still_in: boolean
    family: familyCreateNestedOneWithoutChildsInput
  }

  export type childsUncheckedCreateWithoutBranchInput = {
    id?: number
    name: string
    second_name: string
    third_name: string
    year_birth: number
    absences: number
    still_in: boolean
    familyId: number
  }

  export type childsCreateOrConnectWithoutBranchInput = {
    where: childsWhereUniqueInput
    create: XOR<childsCreateWithoutBranchInput, childsUncheckedCreateWithoutBranchInput>
  }

  export type childsCreateManyBranchInputEnvelope = {
    data: Enumerable<childsCreateManyBranchInput>
    skipDuplicates?: boolean
  }

  export type familyCreateWithoutBranchInput = {
    User?: UserCreateNestedManyWithoutFamilyInput
    childs?: childsCreateNestedManyWithoutFamilyInput
  }

  export type familyUncheckedCreateWithoutBranchInput = {
    id?: number
    User?: UserUncheckedCreateNestedManyWithoutFamilyInput
    childs?: childsUncheckedCreateNestedManyWithoutFamilyInput
  }

  export type familyCreateOrConnectWithoutBranchInput = {
    where: familyWhereUniqueInput
    create: XOR<familyCreateWithoutBranchInput, familyUncheckedCreateWithoutBranchInput>
  }

  export type familyCreateManyBranchInputEnvelope = {
    data: Enumerable<familyCreateManyBranchInput>
    skipDuplicates?: boolean
  }

  export type filesCreateWithoutBranchInput = {
    name: string
    text: string
    max_update_date: Date | string
    file_path: string
    global: boolean
    author: UserCreateNestedOneWithoutFilesInput
  }

  export type filesUncheckedCreateWithoutBranchInput = {
    id?: number
    name: string
    text: string
    max_update_date: Date | string
    file_path: string
    global: boolean
    userId: number
  }

  export type filesCreateOrConnectWithoutBranchInput = {
    where: filesWhereUniqueInput
    create: XOR<filesCreateWithoutBranchInput, filesUncheckedCreateWithoutBranchInput>
  }

  export type filesCreateManyBranchInputEnvelope = {
    data: Enumerable<filesCreateManyBranchInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutBranchInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutBranchInput, UserUncheckedUpdateWithoutBranchInput>
    create: XOR<UserCreateWithoutBranchInput, UserUncheckedCreateWithoutBranchInput>
  }

  export type UserUpdateWithWhereUniqueWithoutBranchInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutBranchInput, UserUncheckedUpdateWithoutBranchInput>
  }

  export type UserUpdateManyWithWhereWithoutBranchInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    firstName?: StringFilter | string
    password?: StringFilter | string
    phone?: StringFilter | string
    role?: StringFilter | string
    updatedAt?: DateTimeFilter | Date | string
    branchesId?: IntFilter | number
    familyId?: IntNullableFilter | number | null
  }

  export type activitiesUpsertWithWhereUniqueWithoutBranchInput = {
    where: activitiesWhereUniqueInput
    update: XOR<activitiesUpdateWithoutBranchInput, activitiesUncheckedUpdateWithoutBranchInput>
    create: XOR<activitiesCreateWithoutBranchInput, activitiesUncheckedCreateWithoutBranchInput>
  }

  export type activitiesUpdateWithWhereUniqueWithoutBranchInput = {
    where: activitiesWhereUniqueInput
    data: XOR<activitiesUpdateWithoutBranchInput, activitiesUncheckedUpdateWithoutBranchInput>
  }

  export type activitiesUpdateManyWithWhereWithoutBranchInput = {
    where: activitiesScalarWhereInput
    data: XOR<activitiesUpdateManyMutationInput, activitiesUncheckedUpdateManyWithoutActivitiesInput>
  }

  export type activitiesScalarWhereInput = {
    AND?: Enumerable<activitiesScalarWhereInput>
    OR?: Enumerable<activitiesScalarWhereInput>
    NOT?: Enumerable<activitiesScalarWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    name?: StringFilter | string
    fileDate?: DateTimeNullableFilter | Date | string | null
    filePath?: StringNullableFilter | string | null
    assistence?: JsonFilter
    branchesId?: IntFilter | number
  }

  export type childsUpsertWithWhereUniqueWithoutBranchInput = {
    where: childsWhereUniqueInput
    update: XOR<childsUpdateWithoutBranchInput, childsUncheckedUpdateWithoutBranchInput>
    create: XOR<childsCreateWithoutBranchInput, childsUncheckedCreateWithoutBranchInput>
  }

  export type childsUpdateWithWhereUniqueWithoutBranchInput = {
    where: childsWhereUniqueInput
    data: XOR<childsUpdateWithoutBranchInput, childsUncheckedUpdateWithoutBranchInput>
  }

  export type childsUpdateManyWithWhereWithoutBranchInput = {
    where: childsScalarWhereInput
    data: XOR<childsUpdateManyMutationInput, childsUncheckedUpdateManyWithoutChildsInput>
  }

  export type childsScalarWhereInput = {
    AND?: Enumerable<childsScalarWhereInput>
    OR?: Enumerable<childsScalarWhereInput>
    NOT?: Enumerable<childsScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    second_name?: StringFilter | string
    third_name?: StringFilter | string
    year_birth?: IntFilter | number
    absences?: IntFilter | number
    still_in?: BoolFilter | boolean
    branchesId?: IntFilter | number
    familyId?: IntFilter | number
  }

  export type familyUpsertWithWhereUniqueWithoutBranchInput = {
    where: familyWhereUniqueInput
    update: XOR<familyUpdateWithoutBranchInput, familyUncheckedUpdateWithoutBranchInput>
    create: XOR<familyCreateWithoutBranchInput, familyUncheckedCreateWithoutBranchInput>
  }

  export type familyUpdateWithWhereUniqueWithoutBranchInput = {
    where: familyWhereUniqueInput
    data: XOR<familyUpdateWithoutBranchInput, familyUncheckedUpdateWithoutBranchInput>
  }

  export type familyUpdateManyWithWhereWithoutBranchInput = {
    where: familyScalarWhereInput
    data: XOR<familyUpdateManyMutationInput, familyUncheckedUpdateManyWithoutFamilyInput>
  }

  export type familyScalarWhereInput = {
    AND?: Enumerable<familyScalarWhereInput>
    OR?: Enumerable<familyScalarWhereInput>
    NOT?: Enumerable<familyScalarWhereInput>
    id?: IntFilter | number
    branchesId?: IntFilter | number
  }

  export type filesUpsertWithWhereUniqueWithoutBranchInput = {
    where: filesWhereUniqueInput
    update: XOR<filesUpdateWithoutBranchInput, filesUncheckedUpdateWithoutBranchInput>
    create: XOR<filesCreateWithoutBranchInput, filesUncheckedCreateWithoutBranchInput>
  }

  export type filesUpdateWithWhereUniqueWithoutBranchInput = {
    where: filesWhereUniqueInput
    data: XOR<filesUpdateWithoutBranchInput, filesUncheckedUpdateWithoutBranchInput>
  }

  export type filesUpdateManyWithWhereWithoutBranchInput = {
    where: filesScalarWhereInput
    data: XOR<filesUpdateManyMutationInput, filesUncheckedUpdateManyWithoutFilesInput>
  }

  export type filesScalarWhereInput = {
    AND?: Enumerable<filesScalarWhereInput>
    OR?: Enumerable<filesScalarWhereInput>
    NOT?: Enumerable<filesScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    text?: StringFilter | string
    max_update_date?: DateTimeFilter | Date | string
    file_path?: StringFilter | string
    branchesId?: IntFilter | number
    global?: BoolFilter | boolean
    userId?: IntFilter | number
  }

  export type branchesCreateWithoutChildsInput = {
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    User?: UserCreateNestedManyWithoutBranchInput
    activities?: activitiesCreateNestedManyWithoutBranchInput
    family?: familyCreateNestedManyWithoutBranchInput
    files?: filesCreateNestedManyWithoutBranchInput
  }

  export type branchesUncheckedCreateWithoutChildsInput = {
    id?: number
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    User?: UserUncheckedCreateNestedManyWithoutBranchInput
    activities?: activitiesUncheckedCreateNestedManyWithoutBranchInput
    family?: familyUncheckedCreateNestedManyWithoutBranchInput
    files?: filesUncheckedCreateNestedManyWithoutBranchInput
  }

  export type branchesCreateOrConnectWithoutChildsInput = {
    where: branchesWhereUniqueInput
    create: XOR<branchesCreateWithoutChildsInput, branchesUncheckedCreateWithoutChildsInput>
  }

  export type familyCreateWithoutChildsInput = {
    User?: UserCreateNestedManyWithoutFamilyInput
    branch: branchesCreateNestedOneWithoutFamilyInput
  }

  export type familyUncheckedCreateWithoutChildsInput = {
    id?: number
    branchesId: number
    User?: UserUncheckedCreateNestedManyWithoutFamilyInput
  }

  export type familyCreateOrConnectWithoutChildsInput = {
    where: familyWhereUniqueInput
    create: XOR<familyCreateWithoutChildsInput, familyUncheckedCreateWithoutChildsInput>
  }

  export type branchesUpsertWithoutChildsInput = {
    update: XOR<branchesUpdateWithoutChildsInput, branchesUncheckedUpdateWithoutChildsInput>
    create: XOR<branchesCreateWithoutChildsInput, branchesUncheckedCreateWithoutChildsInput>
  }

  export type branchesUpdateWithoutChildsInput = {
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutBranchNestedInput
    activities?: activitiesUpdateManyWithoutBranchNestedInput
    family?: familyUpdateManyWithoutBranchNestedInput
    files?: filesUpdateManyWithoutBranchNestedInput
  }

  export type branchesUncheckedUpdateWithoutChildsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutBranchNestedInput
    activities?: activitiesUncheckedUpdateManyWithoutBranchNestedInput
    family?: familyUncheckedUpdateManyWithoutBranchNestedInput
    files?: filesUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type familyUpsertWithoutChildsInput = {
    update: XOR<familyUpdateWithoutChildsInput, familyUncheckedUpdateWithoutChildsInput>
    create: XOR<familyCreateWithoutChildsInput, familyUncheckedCreateWithoutChildsInput>
  }

  export type familyUpdateWithoutChildsInput = {
    User?: UserUpdateManyWithoutFamilyNestedInput
    branch?: branchesUpdateOneRequiredWithoutFamilyNestedInput
  }

  export type familyUncheckedUpdateWithoutChildsInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchesId?: IntFieldUpdateOperationsInput | number
    User?: UserUncheckedUpdateManyWithoutFamilyNestedInput
  }

  export type UserCreateWithoutFamilyInput = {
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branch: branchesCreateNestedOneWithoutUserInput
    files?: filesCreateNestedManyWithoutAuthorInput
    forms_sleep?: forms_sleepCreateNestedManyWithoutConfirmed_byInput
    news?: newsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutFamilyInput = {
    id?: number
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branchesId: number
    files?: filesUncheckedCreateNestedManyWithoutAuthorInput
    forms_sleep?: forms_sleepUncheckedCreateNestedManyWithoutConfirmed_byInput
    news?: newsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutFamilyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFamilyInput, UserUncheckedCreateWithoutFamilyInput>
  }

  export type UserCreateManyFamilyInputEnvelope = {
    data: Enumerable<UserCreateManyFamilyInput>
    skipDuplicates?: boolean
  }

  export type childsCreateWithoutFamilyInput = {
    name: string
    second_name: string
    third_name: string
    year_birth: number
    absences: number
    still_in: boolean
    branch: branchesCreateNestedOneWithoutChildsInput
  }

  export type childsUncheckedCreateWithoutFamilyInput = {
    id?: number
    name: string
    second_name: string
    third_name: string
    year_birth: number
    absences: number
    still_in: boolean
    branchesId: number
  }

  export type childsCreateOrConnectWithoutFamilyInput = {
    where: childsWhereUniqueInput
    create: XOR<childsCreateWithoutFamilyInput, childsUncheckedCreateWithoutFamilyInput>
  }

  export type childsCreateManyFamilyInputEnvelope = {
    data: Enumerable<childsCreateManyFamilyInput>
    skipDuplicates?: boolean
  }

  export type branchesCreateWithoutFamilyInput = {
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    User?: UserCreateNestedManyWithoutBranchInput
    activities?: activitiesCreateNestedManyWithoutBranchInput
    childs?: childsCreateNestedManyWithoutBranchInput
    files?: filesCreateNestedManyWithoutBranchInput
  }

  export type branchesUncheckedCreateWithoutFamilyInput = {
    id?: number
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    User?: UserUncheckedCreateNestedManyWithoutBranchInput
    activities?: activitiesUncheckedCreateNestedManyWithoutBranchInput
    childs?: childsUncheckedCreateNestedManyWithoutBranchInput
    files?: filesUncheckedCreateNestedManyWithoutBranchInput
  }

  export type branchesCreateOrConnectWithoutFamilyInput = {
    where: branchesWhereUniqueInput
    create: XOR<branchesCreateWithoutFamilyInput, branchesUncheckedCreateWithoutFamilyInput>
  }

  export type UserUpsertWithWhereUniqueWithoutFamilyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutFamilyInput, UserUncheckedUpdateWithoutFamilyInput>
    create: XOR<UserCreateWithoutFamilyInput, UserUncheckedCreateWithoutFamilyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutFamilyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutFamilyInput, UserUncheckedUpdateWithoutFamilyInput>
  }

  export type UserUpdateManyWithWhereWithoutFamilyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type childsUpsertWithWhereUniqueWithoutFamilyInput = {
    where: childsWhereUniqueInput
    update: XOR<childsUpdateWithoutFamilyInput, childsUncheckedUpdateWithoutFamilyInput>
    create: XOR<childsCreateWithoutFamilyInput, childsUncheckedCreateWithoutFamilyInput>
  }

  export type childsUpdateWithWhereUniqueWithoutFamilyInput = {
    where: childsWhereUniqueInput
    data: XOR<childsUpdateWithoutFamilyInput, childsUncheckedUpdateWithoutFamilyInput>
  }

  export type childsUpdateManyWithWhereWithoutFamilyInput = {
    where: childsScalarWhereInput
    data: XOR<childsUpdateManyMutationInput, childsUncheckedUpdateManyWithoutChildsInput>
  }

  export type branchesUpsertWithoutFamilyInput = {
    update: XOR<branchesUpdateWithoutFamilyInput, branchesUncheckedUpdateWithoutFamilyInput>
    create: XOR<branchesCreateWithoutFamilyInput, branchesUncheckedCreateWithoutFamilyInput>
  }

  export type branchesUpdateWithoutFamilyInput = {
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutBranchNestedInput
    activities?: activitiesUpdateManyWithoutBranchNestedInput
    childs?: childsUpdateManyWithoutBranchNestedInput
    files?: filesUpdateManyWithoutBranchNestedInput
  }

  export type branchesUncheckedUpdateWithoutFamilyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutBranchNestedInput
    activities?: activitiesUncheckedUpdateManyWithoutBranchNestedInput
    childs?: childsUncheckedUpdateManyWithoutBranchNestedInput
    files?: filesUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type branchesCreateWithoutActivitiesInput = {
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    User?: UserCreateNestedManyWithoutBranchInput
    childs?: childsCreateNestedManyWithoutBranchInput
    family?: familyCreateNestedManyWithoutBranchInput
    files?: filesCreateNestedManyWithoutBranchInput
  }

  export type branchesUncheckedCreateWithoutActivitiesInput = {
    id?: number
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    User?: UserUncheckedCreateNestedManyWithoutBranchInput
    childs?: childsUncheckedCreateNestedManyWithoutBranchInput
    family?: familyUncheckedCreateNestedManyWithoutBranchInput
    files?: filesUncheckedCreateNestedManyWithoutBranchInput
  }

  export type branchesCreateOrConnectWithoutActivitiesInput = {
    where: branchesWhereUniqueInput
    create: XOR<branchesCreateWithoutActivitiesInput, branchesUncheckedCreateWithoutActivitiesInput>
  }

  export type branchesUpsertWithoutActivitiesInput = {
    update: XOR<branchesUpdateWithoutActivitiesInput, branchesUncheckedUpdateWithoutActivitiesInput>
    create: XOR<branchesCreateWithoutActivitiesInput, branchesUncheckedCreateWithoutActivitiesInput>
  }

  export type branchesUpdateWithoutActivitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutBranchNestedInput
    childs?: childsUpdateManyWithoutBranchNestedInput
    family?: familyUpdateManyWithoutBranchNestedInput
    files?: filesUpdateManyWithoutBranchNestedInput
  }

  export type branchesUncheckedUpdateWithoutActivitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutBranchNestedInput
    childs?: childsUncheckedUpdateManyWithoutBranchNestedInput
    family?: familyUncheckedUpdateManyWithoutBranchNestedInput
    files?: filesUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type branchesCreateWithoutFilesInput = {
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    User?: UserCreateNestedManyWithoutBranchInput
    activities?: activitiesCreateNestedManyWithoutBranchInput
    childs?: childsCreateNestedManyWithoutBranchInput
    family?: familyCreateNestedManyWithoutBranchInput
  }

  export type branchesUncheckedCreateWithoutFilesInput = {
    id?: number
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    User?: UserUncheckedCreateNestedManyWithoutBranchInput
    activities?: activitiesUncheckedCreateNestedManyWithoutBranchInput
    childs?: childsUncheckedCreateNestedManyWithoutBranchInput
    family?: familyUncheckedCreateNestedManyWithoutBranchInput
  }

  export type branchesCreateOrConnectWithoutFilesInput = {
    where: branchesWhereUniqueInput
    create: XOR<branchesCreateWithoutFilesInput, branchesUncheckedCreateWithoutFilesInput>
  }

  export type UserCreateWithoutFilesInput = {
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branch: branchesCreateNestedOneWithoutUserInput
    family?: familyCreateNestedOneWithoutUserInput
    forms_sleep?: forms_sleepCreateNestedManyWithoutConfirmed_byInput
    news?: newsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutFilesInput = {
    id?: number
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branchesId: number
    familyId?: number | null
    forms_sleep?: forms_sleepUncheckedCreateNestedManyWithoutConfirmed_byInput
    news?: newsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
  }

  export type branchesUpsertWithoutFilesInput = {
    update: XOR<branchesUpdateWithoutFilesInput, branchesUncheckedUpdateWithoutFilesInput>
    create: XOR<branchesCreateWithoutFilesInput, branchesUncheckedCreateWithoutFilesInput>
  }

  export type branchesUpdateWithoutFilesInput = {
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutBranchNestedInput
    activities?: activitiesUpdateManyWithoutBranchNestedInput
    childs?: childsUpdateManyWithoutBranchNestedInput
    family?: familyUpdateManyWithoutBranchNestedInput
  }

  export type branchesUncheckedUpdateWithoutFilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutBranchNestedInput
    activities?: activitiesUncheckedUpdateManyWithoutBranchNestedInput
    childs?: childsUncheckedUpdateManyWithoutBranchNestedInput
    family?: familyUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type UserUpsertWithoutFilesInput = {
    update: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
  }

  export type UserUpdateWithoutFilesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: branchesUpdateOneRequiredWithoutUserNestedInput
    family?: familyUpdateOneWithoutUserNestedInput
    forms_sleep?: forms_sleepUpdateManyWithoutConfirmed_byNestedInput
    news?: newsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutFilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branchesId?: IntFieldUpdateOperationsInput | number
    familyId?: NullableIntFieldUpdateOperationsInput | number | null
    forms_sleep?: forms_sleepUncheckedUpdateManyWithoutConfirmed_byNestedInput
    news?: newsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateWithoutForms_sleepInput = {
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branch: branchesCreateNestedOneWithoutUserInput
    family?: familyCreateNestedOneWithoutUserInput
    files?: filesCreateNestedManyWithoutAuthorInput
    news?: newsCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutForms_sleepInput = {
    id?: number
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branchesId: number
    familyId?: number | null
    files?: filesUncheckedCreateNestedManyWithoutAuthorInput
    news?: newsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutForms_sleepInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutForms_sleepInput, UserUncheckedCreateWithoutForms_sleepInput>
  }

  export type UserUpsertWithoutForms_sleepInput = {
    update: XOR<UserUpdateWithoutForms_sleepInput, UserUncheckedUpdateWithoutForms_sleepInput>
    create: XOR<UserCreateWithoutForms_sleepInput, UserUncheckedCreateWithoutForms_sleepInput>
  }

  export type UserUpdateWithoutForms_sleepInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: branchesUpdateOneRequiredWithoutUserNestedInput
    family?: familyUpdateOneWithoutUserNestedInput
    files?: filesUpdateManyWithoutAuthorNestedInput
    news?: newsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutForms_sleepInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branchesId?: IntFieldUpdateOperationsInput | number
    familyId?: NullableIntFieldUpdateOperationsInput | number | null
    files?: filesUncheckedUpdateManyWithoutAuthorNestedInput
    news?: newsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateWithoutNewsInput = {
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branch: branchesCreateNestedOneWithoutUserInput
    family?: familyCreateNestedOneWithoutUserInput
    files?: filesCreateNestedManyWithoutAuthorInput
    forms_sleep?: forms_sleepCreateNestedManyWithoutConfirmed_byInput
  }

  export type UserUncheckedCreateWithoutNewsInput = {
    id?: number
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branchesId: number
    familyId?: number | null
    files?: filesUncheckedCreateNestedManyWithoutAuthorInput
    forms_sleep?: forms_sleepUncheckedCreateNestedManyWithoutConfirmed_byInput
  }

  export type UserCreateOrConnectWithoutNewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
  }

  export type UserUpsertWithoutNewsInput = {
    update: XOR<UserUpdateWithoutNewsInput, UserUncheckedUpdateWithoutNewsInput>
    create: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
  }

  export type UserUpdateWithoutNewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: branchesUpdateOneRequiredWithoutUserNestedInput
    family?: familyUpdateOneWithoutUserNestedInput
    files?: filesUpdateManyWithoutAuthorNestedInput
    forms_sleep?: forms_sleepUpdateManyWithoutConfirmed_byNestedInput
  }

  export type UserUncheckedUpdateWithoutNewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branchesId?: IntFieldUpdateOperationsInput | number
    familyId?: NullableIntFieldUpdateOperationsInput | number | null
    files?: filesUncheckedUpdateManyWithoutAuthorNestedInput
    forms_sleep?: forms_sleepUncheckedUpdateManyWithoutConfirmed_byNestedInput
  }

  export type branchesCreateWithoutUserInput = {
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    activities?: activitiesCreateNestedManyWithoutBranchInput
    childs?: childsCreateNestedManyWithoutBranchInput
    family?: familyCreateNestedManyWithoutBranchInput
    files?: filesCreateNestedManyWithoutBranchInput
  }

  export type branchesUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    branch: string
    year_in: number
    year_out: number
    image_path?: string
    activities?: activitiesUncheckedCreateNestedManyWithoutBranchInput
    childs?: childsUncheckedCreateNestedManyWithoutBranchInput
    family?: familyUncheckedCreateNestedManyWithoutBranchInput
    files?: filesUncheckedCreateNestedManyWithoutBranchInput
  }

  export type branchesCreateOrConnectWithoutUserInput = {
    where: branchesWhereUniqueInput
    create: XOR<branchesCreateWithoutUserInput, branchesUncheckedCreateWithoutUserInput>
  }

  export type familyCreateWithoutUserInput = {
    childs?: childsCreateNestedManyWithoutFamilyInput
    branch: branchesCreateNestedOneWithoutFamilyInput
  }

  export type familyUncheckedCreateWithoutUserInput = {
    id?: number
    branchesId: number
    childs?: childsUncheckedCreateNestedManyWithoutFamilyInput
  }

  export type familyCreateOrConnectWithoutUserInput = {
    where: familyWhereUniqueInput
    create: XOR<familyCreateWithoutUserInput, familyUncheckedCreateWithoutUserInput>
  }

  export type filesCreateWithoutAuthorInput = {
    name: string
    text: string
    max_update_date: Date | string
    file_path: string
    global: boolean
    branch: branchesCreateNestedOneWithoutFilesInput
  }

  export type filesUncheckedCreateWithoutAuthorInput = {
    id?: number
    name: string
    text: string
    max_update_date: Date | string
    file_path: string
    branchesId: number
    global: boolean
  }

  export type filesCreateOrConnectWithoutAuthorInput = {
    where: filesWhereUniqueInput
    create: XOR<filesCreateWithoutAuthorInput, filesUncheckedCreateWithoutAuthorInput>
  }

  export type filesCreateManyAuthorInputEnvelope = {
    data: Enumerable<filesCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type forms_sleepCreateWithoutConfirmed_byInput = {
    name: string
    capsQuatitiy: string
    childQuatitiy: string
    comments: string
    confirmed: boolean
    dateIn: Date | string
    dateOut: Date | string
    email: string
    firstName: string
    group: string
    phone: string
  }

  export type forms_sleepUncheckedCreateWithoutConfirmed_byInput = {
    id?: number
    name: string
    capsQuatitiy: string
    childQuatitiy: string
    comments: string
    confirmed: boolean
    dateIn: Date | string
    dateOut: Date | string
    email: string
    firstName: string
    group: string
    phone: string
  }

  export type forms_sleepCreateOrConnectWithoutConfirmed_byInput = {
    where: forms_sleepWhereUniqueInput
    create: XOR<forms_sleepCreateWithoutConfirmed_byInput, forms_sleepUncheckedCreateWithoutConfirmed_byInput>
  }

  export type forms_sleepCreateManyConfirmed_byInputEnvelope = {
    data: Enumerable<forms_sleepCreateManyConfirmed_byInput>
    skipDuplicates?: boolean
  }

  export type newsCreateWithoutAuthorInput = {
    title: string
    text: string
    image_path: string
    global: boolean
  }

  export type newsUncheckedCreateWithoutAuthorInput = {
    id?: number
    title: string
    text: string
    image_path: string
    global: boolean
  }

  export type newsCreateOrConnectWithoutAuthorInput = {
    where: newsWhereUniqueInput
    create: XOR<newsCreateWithoutAuthorInput, newsUncheckedCreateWithoutAuthorInput>
  }

  export type newsCreateManyAuthorInputEnvelope = {
    data: Enumerable<newsCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type branchesUpsertWithoutUserInput = {
    update: XOR<branchesUpdateWithoutUserInput, branchesUncheckedUpdateWithoutUserInput>
    create: XOR<branchesCreateWithoutUserInput, branchesUncheckedCreateWithoutUserInput>
  }

  export type branchesUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    activities?: activitiesUpdateManyWithoutBranchNestedInput
    childs?: childsUpdateManyWithoutBranchNestedInput
    family?: familyUpdateManyWithoutBranchNestedInput
    files?: filesUpdateManyWithoutBranchNestedInput
  }

  export type branchesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    year_in?: IntFieldUpdateOperationsInput | number
    year_out?: IntFieldUpdateOperationsInput | number
    image_path?: StringFieldUpdateOperationsInput | string
    activities?: activitiesUncheckedUpdateManyWithoutBranchNestedInput
    childs?: childsUncheckedUpdateManyWithoutBranchNestedInput
    family?: familyUncheckedUpdateManyWithoutBranchNestedInput
    files?: filesUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type familyUpsertWithoutUserInput = {
    update: XOR<familyUpdateWithoutUserInput, familyUncheckedUpdateWithoutUserInput>
    create: XOR<familyCreateWithoutUserInput, familyUncheckedCreateWithoutUserInput>
  }

  export type familyUpdateWithoutUserInput = {
    childs?: childsUpdateManyWithoutFamilyNestedInput
    branch?: branchesUpdateOneRequiredWithoutFamilyNestedInput
  }

  export type familyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchesId?: IntFieldUpdateOperationsInput | number
    childs?: childsUncheckedUpdateManyWithoutFamilyNestedInput
  }

  export type filesUpsertWithWhereUniqueWithoutAuthorInput = {
    where: filesWhereUniqueInput
    update: XOR<filesUpdateWithoutAuthorInput, filesUncheckedUpdateWithoutAuthorInput>
    create: XOR<filesCreateWithoutAuthorInput, filesUncheckedCreateWithoutAuthorInput>
  }

  export type filesUpdateWithWhereUniqueWithoutAuthorInput = {
    where: filesWhereUniqueInput
    data: XOR<filesUpdateWithoutAuthorInput, filesUncheckedUpdateWithoutAuthorInput>
  }

  export type filesUpdateManyWithWhereWithoutAuthorInput = {
    where: filesScalarWhereInput
    data: XOR<filesUpdateManyMutationInput, filesUncheckedUpdateManyWithoutFilesInput>
  }

  export type forms_sleepUpsertWithWhereUniqueWithoutConfirmed_byInput = {
    where: forms_sleepWhereUniqueInput
    update: XOR<forms_sleepUpdateWithoutConfirmed_byInput, forms_sleepUncheckedUpdateWithoutConfirmed_byInput>
    create: XOR<forms_sleepCreateWithoutConfirmed_byInput, forms_sleepUncheckedCreateWithoutConfirmed_byInput>
  }

  export type forms_sleepUpdateWithWhereUniqueWithoutConfirmed_byInput = {
    where: forms_sleepWhereUniqueInput
    data: XOR<forms_sleepUpdateWithoutConfirmed_byInput, forms_sleepUncheckedUpdateWithoutConfirmed_byInput>
  }

  export type forms_sleepUpdateManyWithWhereWithoutConfirmed_byInput = {
    where: forms_sleepScalarWhereInput
    data: XOR<forms_sleepUpdateManyMutationInput, forms_sleepUncheckedUpdateManyWithoutForms_sleepInput>
  }

  export type forms_sleepScalarWhereInput = {
    AND?: Enumerable<forms_sleepScalarWhereInput>
    OR?: Enumerable<forms_sleepScalarWhereInput>
    NOT?: Enumerable<forms_sleepScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    capsQuatitiy?: StringFilter | string
    childQuatitiy?: StringFilter | string
    comments?: StringFilter | string
    confirmed?: BoolFilter | boolean
    dateIn?: DateTimeFilter | Date | string
    dateOut?: DateTimeFilter | Date | string
    email?: StringFilter | string
    firstName?: StringFilter | string
    group?: StringFilter | string
    phone?: StringFilter | string
    userId?: IntNullableFilter | number | null
  }

  export type newsUpsertWithWhereUniqueWithoutAuthorInput = {
    where: newsWhereUniqueInput
    update: XOR<newsUpdateWithoutAuthorInput, newsUncheckedUpdateWithoutAuthorInput>
    create: XOR<newsCreateWithoutAuthorInput, newsUncheckedCreateWithoutAuthorInput>
  }

  export type newsUpdateWithWhereUniqueWithoutAuthorInput = {
    where: newsWhereUniqueInput
    data: XOR<newsUpdateWithoutAuthorInput, newsUncheckedUpdateWithoutAuthorInput>
  }

  export type newsUpdateManyWithWhereWithoutAuthorInput = {
    where: newsScalarWhereInput
    data: XOR<newsUpdateManyMutationInput, newsUncheckedUpdateManyWithoutNewsInput>
  }

  export type newsScalarWhereInput = {
    AND?: Enumerable<newsScalarWhereInput>
    OR?: Enumerable<newsScalarWhereInput>
    NOT?: Enumerable<newsScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    text?: StringFilter | string
    image_path?: StringFilter | string
    global?: BoolFilter | boolean
    userId?: IntFilter | number
  }

  export type UserCreateManyBranchInput = {
    id?: number
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    familyId?: number | null
  }

  export type activitiesCreateManyBranchInput = {
    id?: number
    date: Date | string
    name: string
    fileDate?: Date | string | null
    filePath?: string | null
    assistence: JsonNullValueInput | InputJsonValue
  }

  export type childsCreateManyBranchInput = {
    id?: number
    name: string
    second_name: string
    third_name: string
    year_birth: number
    absences: number
    still_in: boolean
    familyId: number
  }

  export type familyCreateManyBranchInput = {
    id?: number
  }

  export type filesCreateManyBranchInput = {
    id?: number
    name: string
    text: string
    max_update_date: Date | string
    file_path: string
    global: boolean
    userId: number
  }

  export type UserUpdateWithoutBranchInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    family?: familyUpdateOneWithoutUserNestedInput
    files?: filesUpdateManyWithoutAuthorNestedInput
    forms_sleep?: forms_sleepUpdateManyWithoutConfirmed_byNestedInput
    news?: newsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    familyId?: NullableIntFieldUpdateOperationsInput | number | null
    files?: filesUncheckedUpdateManyWithoutAuthorNestedInput
    forms_sleep?: forms_sleepUncheckedUpdateManyWithoutConfirmed_byNestedInput
    news?: newsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    familyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type activitiesUpdateWithoutBranchInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fileDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    assistence?: JsonNullValueInput | InputJsonValue
  }

  export type activitiesUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fileDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    assistence?: JsonNullValueInput | InputJsonValue
  }

  export type activitiesUncheckedUpdateManyWithoutActivitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fileDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    assistence?: JsonNullValueInput | InputJsonValue
  }

  export type childsUpdateWithoutBranchInput = {
    name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    third_name?: StringFieldUpdateOperationsInput | string
    year_birth?: IntFieldUpdateOperationsInput | number
    absences?: IntFieldUpdateOperationsInput | number
    still_in?: BoolFieldUpdateOperationsInput | boolean
    family?: familyUpdateOneRequiredWithoutChildsNestedInput
  }

  export type childsUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    third_name?: StringFieldUpdateOperationsInput | string
    year_birth?: IntFieldUpdateOperationsInput | number
    absences?: IntFieldUpdateOperationsInput | number
    still_in?: BoolFieldUpdateOperationsInput | boolean
    familyId?: IntFieldUpdateOperationsInput | number
  }

  export type childsUncheckedUpdateManyWithoutChildsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    third_name?: StringFieldUpdateOperationsInput | string
    year_birth?: IntFieldUpdateOperationsInput | number
    absences?: IntFieldUpdateOperationsInput | number
    still_in?: BoolFieldUpdateOperationsInput | boolean
    familyId?: IntFieldUpdateOperationsInput | number
  }

  export type familyUpdateWithoutBranchInput = {
    User?: UserUpdateManyWithoutFamilyNestedInput
    childs?: childsUpdateManyWithoutFamilyNestedInput
  }

  export type familyUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    User?: UserUncheckedUpdateManyWithoutFamilyNestedInput
    childs?: childsUncheckedUpdateManyWithoutFamilyNestedInput
  }

  export type familyUncheckedUpdateManyWithoutFamilyInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type filesUpdateWithoutBranchInput = {
    name?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    max_update_date?: DateTimeFieldUpdateOperationsInput | Date | string
    file_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
    author?: UserUpdateOneRequiredWithoutFilesNestedInput
  }

  export type filesUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    max_update_date?: DateTimeFieldUpdateOperationsInput | Date | string
    file_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type filesUncheckedUpdateManyWithoutFilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    max_update_date?: DateTimeFieldUpdateOperationsInput | Date | string
    file_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyFamilyInput = {
    id?: number
    name: string
    email: string
    createdAt?: Date | string
    firstName: string
    password: string
    phone: string
    role?: string
    updatedAt?: Date | string
    branchesId: number
  }

  export type childsCreateManyFamilyInput = {
    id?: number
    name: string
    second_name: string
    third_name: string
    year_birth: number
    absences: number
    still_in: boolean
    branchesId: number
  }

  export type UserUpdateWithoutFamilyInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: branchesUpdateOneRequiredWithoutUserNestedInput
    files?: filesUpdateManyWithoutAuthorNestedInput
    forms_sleep?: forms_sleepUpdateManyWithoutConfirmed_byNestedInput
    news?: newsUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateWithoutFamilyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    branchesId?: IntFieldUpdateOperationsInput | number
    files?: filesUncheckedUpdateManyWithoutAuthorNestedInput
    forms_sleep?: forms_sleepUncheckedUpdateManyWithoutConfirmed_byNestedInput
    news?: newsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type childsUpdateWithoutFamilyInput = {
    name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    third_name?: StringFieldUpdateOperationsInput | string
    year_birth?: IntFieldUpdateOperationsInput | number
    absences?: IntFieldUpdateOperationsInput | number
    still_in?: BoolFieldUpdateOperationsInput | boolean
    branch?: branchesUpdateOneRequiredWithoutChildsNestedInput
  }

  export type childsUncheckedUpdateWithoutFamilyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    second_name?: StringFieldUpdateOperationsInput | string
    third_name?: StringFieldUpdateOperationsInput | string
    year_birth?: IntFieldUpdateOperationsInput | number
    absences?: IntFieldUpdateOperationsInput | number
    still_in?: BoolFieldUpdateOperationsInput | boolean
    branchesId?: IntFieldUpdateOperationsInput | number
  }

  export type filesCreateManyAuthorInput = {
    id?: number
    name: string
    text: string
    max_update_date: Date | string
    file_path: string
    branchesId: number
    global: boolean
  }

  export type forms_sleepCreateManyConfirmed_byInput = {
    id?: number
    name: string
    capsQuatitiy: string
    childQuatitiy: string
    comments: string
    confirmed: boolean
    dateIn: Date | string
    dateOut: Date | string
    email: string
    firstName: string
    group: string
    phone: string
  }

  export type newsCreateManyAuthorInput = {
    id?: number
    title: string
    text: string
    image_path: string
    global: boolean
  }

  export type filesUpdateWithoutAuthorInput = {
    name?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    max_update_date?: DateTimeFieldUpdateOperationsInput | Date | string
    file_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
    branch?: branchesUpdateOneRequiredWithoutFilesNestedInput
  }

  export type filesUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    max_update_date?: DateTimeFieldUpdateOperationsInput | Date | string
    file_path?: StringFieldUpdateOperationsInput | string
    branchesId?: IntFieldUpdateOperationsInput | number
    global?: BoolFieldUpdateOperationsInput | boolean
  }

  export type forms_sleepUpdateWithoutConfirmed_byInput = {
    name?: StringFieldUpdateOperationsInput | string
    capsQuatitiy?: StringFieldUpdateOperationsInput | string
    childQuatitiy?: StringFieldUpdateOperationsInput | string
    comments?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    dateIn?: DateTimeFieldUpdateOperationsInput | Date | string
    dateOut?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type forms_sleepUncheckedUpdateWithoutConfirmed_byInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capsQuatitiy?: StringFieldUpdateOperationsInput | string
    childQuatitiy?: StringFieldUpdateOperationsInput | string
    comments?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    dateIn?: DateTimeFieldUpdateOperationsInput | Date | string
    dateOut?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type forms_sleepUncheckedUpdateManyWithoutForms_sleepInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capsQuatitiy?: StringFieldUpdateOperationsInput | string
    childQuatitiy?: StringFieldUpdateOperationsInput | string
    comments?: StringFieldUpdateOperationsInput | string
    confirmed?: BoolFieldUpdateOperationsInput | boolean
    dateIn?: DateTimeFieldUpdateOperationsInput | Date | string
    dateOut?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type newsUpdateWithoutAuthorInput = {
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    image_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
  }

  export type newsUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    image_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
  }

  export type newsUncheckedUpdateManyWithoutNewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    image_path?: StringFieldUpdateOperationsInput | string
    global?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}